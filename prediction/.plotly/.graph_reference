{
    "layout": {
        "layoutAttributes": {
            "plot_bgcolor": {
                "description": "Sets the color of plotting area in-between x and y axes.",
                "valType": "color",
                "role": "style",
                "dflt": "#fff"
            },
            "shapes": {
                "role": "object",
                "items": {
                    "shape": {
                        "y0": {
                            "description": "Sets the shape's starting y position. See `type` for more info.",
                            "valType": "any",
                            "role": "info"
                        },
                        "opacity": {
                            "description": "Sets the opacity of the shape.",
                            "min": 0,
                            "role": "info",
                            "max": 1,
                            "valType": "number",
                            "dflt": 1
                        },
                        "x1": {
                            "description": "Sets the shape's end x position. See `type` for more info.",
                            "valType": "any",
                            "role": "info"
                        },
                        "layer": {
                            "description": "Specifies whether shapes are drawn below or above traces.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "below",
                                "above"
                            ],
                            "dflt": "above"
                        },
                        "yref": {
                            "description": "Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top).",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "paper",
                                "/^y([2-9]|[1-9][0-9]+)?$/"
                            ]
                        },
                        "role": "object",
                        "type": {
                            "description": "Specifies the shape type to be drawn. If *line*, a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) If *circle*, a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) If *rect*, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`) If *path*, draw a custom SVG path using `path`.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "circle",
                                "rect",
                                "path",
                                "line"
                            ]
                        },
                        "y1": {
                            "description": "Sets the shape's end y position. See `type` for more info.",
                            "valType": "any",
                            "role": "info"
                        },
                        "path": {
                            "description": "For `type` *path* - a valid SVG path but with the pixel values replaced by data values. There are a few restrictions / quirks only absolute instructions, not relative. So the allowed segments are: M, L, H, V, Q, C, T, S, and Z arcs (A) are not allowed because radius rx and ry are relative. In the future we could consider supporting relative commands, but we would have to decide on how to handle date and log axes. Note that even as is, Q and C Bezier paths that are smooth on linear axes may not be smooth on log, and vice versa. no chained \"polybezier\" commands - specify the segment type for each one. On category axes, values are numbers scaled to the serial numbers of categories because using the categories themselves there would be no way to describe fractional positions On data axes: because space and T are both normal components of path strings, we can't use either to separate date from time parts. Therefore we'll use underscore for this purpose: 2015-02-21_13:45:56.789",
                            "valType": "string",
                            "role": "info"
                        },
                        "line": {
                            "color": {
                                "description": "Sets the line color.",
                                "valType": "color",
                                "role": "style"
                            },
                            "role": "object",
                            "width": {
                                "description": "Sets the line width (in px).",
                                "min": 0,
                                "valType": "number",
                                "role": "style",
                                "dflt": 2
                            },
                            "dash": {
                                "description": "Sets the style of the lines. Set to a dash string type or a dash length in px.",
                                "valType": "string",
                                "role": "style",
                                "values": [
                                    "solid",
                                    "dot",
                                    "dash",
                                    "longdash",
                                    "dashdot",
                                    "longdashdot"
                                ],
                                "dflt": "solid"
                            }
                        },
                        "x0": {
                            "description": "Sets the shape's starting x position. See `type` for more info.",
                            "valType": "any",
                            "role": "info"
                        },
                        "xref": {
                            "description": "Sets the shape's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right) side.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "paper",
                                "/^x([2-9]|[1-9][0-9]+)?$/"
                            ]
                        },
                        "fillcolor": {
                            "description": "Sets the color filling the shape's interior.",
                            "valType": "color",
                            "role": "info",
                            "dflt": "rgba(0,0,0,0)"
                        }
                    }
                }
            },
            "titlefont": {
                "description": "Sets the title font.",
                "color": {
                    "valType": "color",
                    "role": "style"
                },
                "size": {
                    "min": 1,
                    "valType": "number",
                    "role": "style"
                },
                "role": "object",
                "family": {
                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                    "valType": "string",
                    "role": "style",
                    "noBlank": true,
                    "strict": true
                }
            },
            "hidesources": {
                "description": "Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the plotly service (at https://plot.ly or on-premise).",
                "valType": "boolean",
                "role": "info",
                "dflt": false
            },
            "legend": {
                "yanchor": {
                    "description": "Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "auto",
                        "top",
                        "middle",
                        "bottom"
                    ],
                    "dflt": "auto"
                },
                "borderwidth": {
                    "description": "Sets the width (in px) of the border enclosing the legend.",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 0
                },
                "tracegroupgap": {
                    "description": "Sets the amount of vertical space (in px) between legend groups.",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 10
                },
                "font": {
                    "description": "Sets the font used to text the legend items.",
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style"
                    },
                    "role": "object",
                    "family": {
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "x": {
                    "description": "Sets the x position (in normalized coordinates) of the legend.",
                    "min": -2,
                    "role": "style",
                    "max": 3,
                    "valType": "number",
                    "dflt": 1.02
                },
                "bgcolor": {
                    "description": "Sets the legend background color.",
                    "valType": "color",
                    "role": "style"
                },
                "role": "object",
                "traceorder": {
                    "flags": [
                        "reversed",
                        "grouped"
                    ],
                    "extras": [
                        "normal"
                    ],
                    "valType": "flaglist",
                    "role": "style",
                    "description": "Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*."
                },
                "xanchor": {
                    "description": "Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "auto",
                        "left",
                        "center",
                        "right"
                    ],
                    "dflt": "left"
                },
                "bordercolor": {
                    "description": "Sets the color of the border enclosing the legend.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "y": {
                    "description": "Sets the y position (in normalized coordinates) of the legend.",
                    "min": -2,
                    "role": "style",
                    "max": 3,
                    "valType": "number",
                    "dflt": 1
                }
            },
            "margin": {
                "l": {
                    "description": "Sets the left margin (in px).",
                    "min": 0,
                    "valType": "number",
                    "role": "info",
                    "dflt": 80
                },
                "role": "object",
                "t": {
                    "description": "Sets the top margin (in px).",
                    "min": 0,
                    "valType": "number",
                    "role": "info",
                    "dflt": 100
                },
                "r": {
                    "description": "Sets the right margin (in px).",
                    "min": 0,
                    "valType": "number",
                    "role": "info",
                    "dflt": 80
                },
                "pad": {
                    "description": "Sets the amount of padding (in px) between the plotting area and the axis lines",
                    "min": 0,
                    "valType": "number",
                    "role": "info",
                    "dflt": 0
                },
                "autoexpand": {
                    "dflt": true,
                    "valType": "boolean",
                    "role": "info"
                },
                "b": {
                    "description": "Sets the bottom margin (in px).",
                    "min": 0,
                    "valType": "number",
                    "role": "info",
                    "dflt": 80
                }
            },
            "paper_bgcolor": {
                "description": "Sets the color of paper where the graph is drawn.",
                "valType": "color",
                "role": "style",
                "dflt": "#fff"
            },
            "smith": {
                "dflt": false,
                "values": [
                    false
                ],
                "role": "info",
                "valType": "enumerated"
            },
            "annotations": {
                "role": "object",
                "items": {
                    "annotation": {
                        "align": {
                            "description": "Sets the vertical alignment of the `text` with respect to the set `x` and `y` position. Has only an effect if `text` spans more two or more lines (i.e. `text` contains one or more <br> HTML tags).",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "center"
                        },
                        "role": "object",
                        "opacity": {
                            "description": "Sets the opacity of the annotation (text + arrow).",
                            "min": 0,
                            "role": "style",
                            "max": 1,
                            "valType": "number",
                            "dflt": 1
                        },
                        "_deprecated": {
                            "ref": {
                                "description": "Obsolete. Set `xref` and `yref` separately instead.",
                                "valType": "string",
                                "role": "info"
                            }
                        },
                        "yref": {
                            "description": "Sets the annotation's y coordinate axis. If set to an y axis id (e.g. *y* or *y2*), the `y` position refers to an y coordinate If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where 0 (1) corresponds to the bottom (top).",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "paper",
                                "/^y([2-9]|[1-9][0-9]+)?$/"
                            ]
                        },
                        "arrowsize": {
                            "description": "Sets the size (in px) of annotation arrow head.",
                            "min": 0.3,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "ax": {
                            "description": "Sets the x component of the arrow tail about the arrow head. A positive (negative) component corresponds to an arrow pointing from right to left (left to right)",
                            "valType": "number",
                            "role": "info",
                            "dflt": -10
                        },
                        "text": {
                            "description": "Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub> <span> are also supported.",
                            "valType": "string",
                            "role": "info"
                        },
                        "font": {
                            "description": "Sets the annotation text font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "xref": {
                            "description": "Sets the annotation's x coordinate axis. If set to an x axis id (e.g. *x* or *x2*), the `x` position refers to an x coordinate If set to *paper*, the `x` position refers to the distance from the left side of the plotting area in normalized coordinates where 0 (1) corresponds to the left (right) side.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "paper",
                                "/^x([2-9]|[1-9][0-9]+)?$/"
                            ]
                        },
                        "bordercolor": {
                            "description": "Sets the color of the border enclosing the annotation `text`.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "rgba(0,0,0,0)"
                        },
                        "showarrow": {
                            "description": "Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "borderwidth": {
                            "description": "Sets the width (in px) of the border enclosing the annotation `text`.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "yanchor": {
                            "description": "Sets the annotation's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations whereas for paper-referenced, the anchor picked corresponds to the closest side.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "auto",
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "auto"
                        },
                        "arrowwidth": {
                            "description": "Sets the width (in px) of annotation arrow.",
                            "min": 0.1,
                            "valType": "number",
                            "role": "style"
                        },
                        "ay": {
                            "description": "Sets the y component of the arrow tail about the arrow head. A positive (negative) component corresponds to an arrow pointing from bottom to top (top to bottom)",
                            "valType": "number",
                            "role": "info",
                            "dflt": -30
                        },
                        "arrowcolor": {
                            "description": "Sets the color of the annotation arrow.",
                            "valType": "color",
                            "role": "style"
                        },
                        "x": {
                            "description": "Sets the annotation's x position. Note that dates and categories are converted to numbers.",
                            "valType": "number",
                            "role": "info"
                        },
                        "textangle": {
                            "description": "Sets the angle at which the `text` is drawn with respect to the horizontal.",
                            "valType": "angle",
                            "role": "style",
                            "dflt": 0
                        },
                        "borderpad": {
                            "description": "Sets the padding (in px) between the `text` and the enclosing border.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "bgcolor": {
                            "description": "Sets the background color of the annotation.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "rgba(0,0,0,0)"
                        },
                        "y": {
                            "description": "Sets the annotation's y position. Note that dates and categories are converted to numbers.",
                            "valType": "number",
                            "role": "info"
                        },
                        "xanchor": {
                            "description": "Sets the annotation's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations whereas for paper-referenced, the anchor picked corresponds to the closest side.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "auto",
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "auto"
                        },
                        "arrowhead": {
                            "description": "Sets the annotation arrow head style.",
                            "min": 0,
                            "role": "style",
                            "max": 8,
                            "valType": "integer",
                            "dflt": 1
                        }
                    }
                }
            },
            "showlegend": {
                "description": "Determines whether or not a legend is drawn.",
                "valType": "boolean",
                "role": "info"
            },
            "font": {
                "description": "Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.",
                "color": {
                    "dflt": "#444",
                    "valType": "color",
                    "role": "style"
                },
                "size": {
                    "dflt": 12,
                    "min": 1,
                    "valType": "number",
                    "role": "style"
                },
                "role": "object",
                "family": {
                    "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                    "dflt": "\"Open Sans\", verdana, arial, sans-serif",
                    "valType": "string",
                    "role": "style",
                    "noBlank": true,
                    "strict": true
                }
            },
            "autosize": {
                "description": "Determines whether or not the dimensions of the figure are computed as a function of the display size.",
                "values": [
                    true,
                    false,
                    "initial"
                ],
                "role": "info",
                "valType": "enumerated"
            },
            "hovermode": {
                "description": "Determines the mode of hover interactions.",
                "values": [
                    "x",
                    "y",
                    "closest",
                    false
                ],
                "role": "info",
                "valType": "enumerated"
            },
            "title": {
                "description": "Sets the plot's title.",
                "valType": "string",
                "role": "info",
                "dflt": "Click to enter Plot title"
            },
            "scene": {
                "domain": {
                    "y": {
                        "description": "Sets the vertical domain of this scene (in plot fraction).",
                        "valType": "info_array",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ],
                        "items": [
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            },
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            }
                        ]
                    },
                    "x": {
                        "description": "Sets the horizontal domain of this scene (in plot fraction).",
                        "valType": "info_array",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ],
                        "items": [
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            },
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            }
                        ]
                    },
                    "role": "object"
                },
                "role": "object",
                "_deprecated": {
                    "cameraposition": {
                        "description": "Obsolete. Use `camera` instead.",
                        "valType": "info_array",
                        "role": "info"
                    }
                },
                "_isSubplotObj": true,
                "xaxis": {
                    "titlefont": {
                        "description": "Sets this axis' title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "zerolinewidth": {
                        "description": "Sets the width (in px) of the zero line.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "spikethickness": {
                        "description": "Sets the thickness (in px) of the spikes.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "backgroundcolor": {
                        "description": "Sets the background color of this axis' wall.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgba(204, 204, 204, 0.5)"
                    },
                    "fixedrange": {
                        "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    },
                    "showline": {
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": false
                    },
                    "type": {
                        "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "-",
                            "linear",
                            "log",
                            "date",
                            "category"
                        ],
                        "dflt": "-"
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "gridwidth": {
                        "description": "Sets the width (in px) of the grid lines.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "spikesides": {
                        "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "linewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "range": {
                        "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the date range from January 1st 1970 to November 4th, 2013, set the range from 0 to 1380844800000.0",
                        "valType": "info_array",
                        "role": "info",
                        "items": [
                            {
                                "valType": "number"
                            },
                            {
                                "valType": "number"
                            }
                        ]
                    },
                    "showbackground": {
                        "description": "Sets whether or not this axis' wall has a background color.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    },
                    "showaxeslabels": {
                        "description": "Sets whether or not this axis is labeled",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "categoryarraysrc": {
                        "description": "Sets the source reference on plot.ly for  categoryarray .",
                        "valType": "string",
                        "role": "info"
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "role": "object",
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "zeroline": {
                        "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
                        "valType": "boolean",
                        "role": "style"
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    },
                    "categoryarray": {
                        "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "zerolinecolor": {
                        "description": "Sets the line color of the zero line.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "autorange": {
                        "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            true,
                            false,
                            "reversed"
                        ],
                        "dflt": true
                    },
                    "linecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "title": {
                        "description": "Sets the title of this axis.",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "showspikes": {
                        "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "color": {
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "showgrid": {
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "rangemode": {
                        "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "normal",
                            "tozero",
                            "nonnegative"
                        ],
                        "dflt": "normal"
                    },
                    "categoryorder": {
                        "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "trace",
                            "category ascending",
                            "category descending",
                            "array"
                        ],
                        "dflt": "trace"
                    },
                    "spikecolor": {
                        "description": "Sets the color of the spikes.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgb(0,0,0)"
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ]
                    },
                    "gridcolor": {
                        "description": "Sets the color of the grid lines.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgb(204, 204, 204)"
                    },
                    "hoverformat": {
                        "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "mirror": {
                        "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            true,
                            "ticks",
                            false,
                            "all",
                            "allticks"
                        ],
                        "dflt": false
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    }
                },
                "aspectratio": {
                    "y": {
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "x": {
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "description": "Sets this scene's axis aspectratio.",
                    "z": {
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    }
                },
                "yaxis": {
                    "titlefont": {
                        "description": "Sets this axis' title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "zerolinewidth": {
                        "description": "Sets the width (in px) of the zero line.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "spikethickness": {
                        "description": "Sets the thickness (in px) of the spikes.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "backgroundcolor": {
                        "description": "Sets the background color of this axis' wall.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgba(204, 204, 204, 0.5)"
                    },
                    "fixedrange": {
                        "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    },
                    "showline": {
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": false
                    },
                    "type": {
                        "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "-",
                            "linear",
                            "log",
                            "date",
                            "category"
                        ],
                        "dflt": "-"
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "gridwidth": {
                        "description": "Sets the width (in px) of the grid lines.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "spikesides": {
                        "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "linewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "range": {
                        "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the date range from January 1st 1970 to November 4th, 2013, set the range from 0 to 1380844800000.0",
                        "valType": "info_array",
                        "role": "info",
                        "items": [
                            {
                                "valType": "number"
                            },
                            {
                                "valType": "number"
                            }
                        ]
                    },
                    "showbackground": {
                        "description": "Sets whether or not this axis' wall has a background color.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    },
                    "showaxeslabels": {
                        "description": "Sets whether or not this axis is labeled",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "categoryarraysrc": {
                        "description": "Sets the source reference on plot.ly for  categoryarray .",
                        "valType": "string",
                        "role": "info"
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "role": "object",
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "zeroline": {
                        "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
                        "valType": "boolean",
                        "role": "style"
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    },
                    "categoryarray": {
                        "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "zerolinecolor": {
                        "description": "Sets the line color of the zero line.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "autorange": {
                        "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            true,
                            false,
                            "reversed"
                        ],
                        "dflt": true
                    },
                    "linecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "title": {
                        "description": "Sets the title of this axis.",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "showspikes": {
                        "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "color": {
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "showgrid": {
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "rangemode": {
                        "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "normal",
                            "tozero",
                            "nonnegative"
                        ],
                        "dflt": "normal"
                    },
                    "categoryorder": {
                        "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "trace",
                            "category ascending",
                            "category descending",
                            "array"
                        ],
                        "dflt": "trace"
                    },
                    "spikecolor": {
                        "description": "Sets the color of the spikes.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgb(0,0,0)"
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ]
                    },
                    "gridcolor": {
                        "description": "Sets the color of the grid lines.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgb(204, 204, 204)"
                    },
                    "hoverformat": {
                        "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "mirror": {
                        "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            true,
                            "ticks",
                            false,
                            "all",
                            "allticks"
                        ],
                        "dflt": false
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    }
                },
                "bgcolor": {
                    "dflt": "rgba(0,0,0,0)",
                    "valType": "color",
                    "role": "style"
                },
                "dragmode": {
                    "description": "Determines the mode of drag interactions for this scene.",
                    "values": [
                        "orbit",
                        "turntable",
                        "zoom",
                        "pan"
                    ],
                    "role": "info",
                    "valType": "enumerated",
                    "dflt": "turntable"
                },
                "zaxis": {
                    "titlefont": {
                        "description": "Sets this axis' title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "zerolinewidth": {
                        "description": "Sets the width (in px) of the zero line.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "spikethickness": {
                        "description": "Sets the thickness (in px) of the spikes.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "backgroundcolor": {
                        "description": "Sets the background color of this axis' wall.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgba(204, 204, 204, 0.5)"
                    },
                    "fixedrange": {
                        "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    },
                    "showline": {
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": false
                    },
                    "type": {
                        "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "-",
                            "linear",
                            "log",
                            "date",
                            "category"
                        ],
                        "dflt": "-"
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "gridwidth": {
                        "description": "Sets the width (in px) of the grid lines.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "spikesides": {
                        "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "linewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "range": {
                        "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the date range from January 1st 1970 to November 4th, 2013, set the range from 0 to 1380844800000.0",
                        "valType": "info_array",
                        "role": "info",
                        "items": [
                            {
                                "valType": "number"
                            },
                            {
                                "valType": "number"
                            }
                        ]
                    },
                    "showbackground": {
                        "description": "Sets whether or not this axis' wall has a background color.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    },
                    "showaxeslabels": {
                        "description": "Sets whether or not this axis is labeled",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "categoryarraysrc": {
                        "description": "Sets the source reference on plot.ly for  categoryarray .",
                        "valType": "string",
                        "role": "info"
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "role": "object",
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "zeroline": {
                        "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
                        "valType": "boolean",
                        "role": "style"
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    },
                    "categoryarray": {
                        "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "zerolinecolor": {
                        "description": "Sets the line color of the zero line.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "autorange": {
                        "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            true,
                            false,
                            "reversed"
                        ],
                        "dflt": true
                    },
                    "linecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "title": {
                        "description": "Sets the title of this axis.",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "showspikes": {
                        "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "color": {
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "showgrid": {
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "valType": "boolean",
                        "role": "style"
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "rangemode": {
                        "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "normal",
                            "tozero",
                            "nonnegative"
                        ],
                        "dflt": "normal"
                    },
                    "categoryorder": {
                        "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "trace",
                            "category ascending",
                            "category descending",
                            "array"
                        ],
                        "dflt": "trace"
                    },
                    "spikecolor": {
                        "description": "Sets the color of the spikes.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgb(0,0,0)"
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ]
                    },
                    "gridcolor": {
                        "description": "Sets the color of the grid lines.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgb(204, 204, 204)"
                    },
                    "hoverformat": {
                        "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "mirror": {
                        "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            true,
                            "ticks",
                            false,
                            "all",
                            "allticks"
                        ],
                        "dflt": false
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    }
                },
                "aspectmode": {
                    "description": "If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.",
                    "values": [
                        "auto",
                        "cube",
                        "data",
                        "manual"
                    ],
                    "role": "info",
                    "valType": "enumerated",
                    "dflt": "auto"
                },
                "camera": {
                    "eye": {
                        "y": {
                            "dflt": 1.25,
                            "valType": "number",
                            "role": "info"
                        },
                        "x": {
                            "dflt": 1.25,
                            "valType": "number",
                            "role": "info"
                        },
                        "role": "object",
                        "description": "Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene.",
                        "z": {
                            "dflt": 1.25,
                            "valType": "number",
                            "role": "info"
                        }
                    },
                    "role": "object",
                    "up": {
                        "y": {
                            "dflt": 0,
                            "valType": "number",
                            "role": "info"
                        },
                        "x": {
                            "dflt": 0,
                            "valType": "number",
                            "role": "info"
                        },
                        "role": "object",
                        "description": "Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is *{x: 0, y: 0, z: 1}* which means that the z axis points up.",
                        "z": {
                            "dflt": 1,
                            "valType": "number",
                            "role": "info"
                        }
                    },
                    "center": {
                        "y": {
                            "dflt": 0,
                            "valType": "number",
                            "role": "info"
                        },
                        "x": {
                            "dflt": 0,
                            "valType": "number",
                            "role": "info"
                        },
                        "role": "object",
                        "description": "Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation.",
                        "z": {
                            "dflt": 0,
                            "valType": "number",
                            "role": "info"
                        }
                    }
                },
                "hovermode": {
                    "description": "Determines the mode of hover interactions for this scene.",
                    "values": [
                        "closest",
                        false
                    ],
                    "role": "info",
                    "valType": "enumerated",
                    "dflt": "closest"
                }
            },
            "direction": {
                "description": "For polar plots only. Sets the direction corresponding to positive angles.",
                "valType": "enumerated",
                "role": "info",
                "values": [
                    "clockwise",
                    "counterclockwise"
                ]
            },
            "radialaxis": {
                "domain": {
                    "description": "Polar chart subplots are not supported yet. This key has currently no effect.",
                    "valType": "info_array",
                    "role": "info",
                    "dflt": [
                        0,
                        1
                    ],
                    "items": [
                        {
                            "min": 0,
                            "max": 1,
                            "valType": "number"
                        },
                        {
                            "min": 0,
                            "max": 1,
                            "valType": "number"
                        }
                    ]
                },
                "range": {
                    "description": "Defines the start and end point of this radial axis.",
                    "valType": "info_array",
                    "role": "info",
                    "items": [
                        {
                            "valType": "number"
                        },
                        {
                            "valType": "number"
                        }
                    ]
                },
                "tickorientation": {
                    "description": "Sets the orientation (from the paper perspective) of the radial axis tick labels.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "horizontal",
                        "vertical"
                    ]
                },
                "role": "object",
                "orientation": {
                    "description": "Sets the orientation (an angle with respect to the origin) of the radial axis.",
                    "valType": "number",
                    "role": "style"
                },
                "showline": {
                    "description": "Determines whether or not the line bounding this radial axis will be shown on the figure.",
                    "valType": "boolean",
                    "role": "style"
                },
                "visible": {
                    "description": "Determines whether or not this axis will be visible.",
                    "valType": "boolean",
                    "role": "info"
                },
                "tickcolor": {
                    "description": "Sets the color of the tick lines on this radial axis.",
                    "valType": "color",
                    "role": "style"
                },
                "endpadding": {
                    "valType": "number",
                    "role": "style"
                },
                "showticklabels": {
                    "description": "Determines whether or not the radial axis ticks will feature tick labels.",
                    "valType": "boolean",
                    "role": "style"
                },
                "ticksuffix": {
                    "description": "Sets the length of the tick lines on this radial axis.",
                    "valType": "string",
                    "role": "style"
                },
                "ticklen": {
                    "description": "Sets the length of the tick lines on this radial axis.",
                    "min": 0,
                    "valType": "number",
                    "role": "style"
                }
            },
            "xaxis": {
                "color": {
                    "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "titlefont": {
                    "description": "Sets this axis' title font.",
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style"
                    },
                    "role": "object",
                    "family": {
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "side": {
                    "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "top",
                        "bottom",
                        "left",
                        "right"
                    ]
                },
                "zerolinewidth": {
                    "description": "Sets the width (in px) of the zero line.",
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "_isSubplotObj": true,
                "categoryarray": {
                    "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                    "valType": "data_array",
                    "role": "data"
                },
                "fixedrange": {
                    "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "showline": {
                    "description": "Determines whether or not a line bounding this axis is drawn.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "type": {
                    "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "-",
                        "linear",
                        "log",
                        "date",
                        "category"
                    ],
                    "dflt": "-"
                },
                "tickcolor": {
                    "description": "Sets the tick color.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "hoverformat": {
                    "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                    "valType": "string",
                    "role": "style",
                    "dflt": ""
                },
                "gridwidth": {
                    "description": "Sets the width (in px) of the grid lines.",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "ticksuffix": {
                    "description": "Sets a tick label suffix.",
                    "valType": "string",
                    "role": "style",
                    "dflt": ""
                },
                "tickmode": {
                    "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "auto",
                        "linear",
                        "array"
                    ]
                },
                "_deprecated": {
                    "autotick": {
                        "description": "Obsolete. Set `tickmode` to *auto* for old `autotick` *true* behavior. Set `tickmode` to *linear* for `autotick` *false*.",
                        "valType": "boolean",
                        "role": "info"
                    }
                },
                "linewidth": {
                    "description": "Sets the width (in px) of the axis line.",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "range": {
                    "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the date range from January 1st 1970 to November 4th, 2013, set the range from 0 to 1380844800000.0",
                    "valType": "info_array",
                    "role": "info",
                    "items": [
                        {
                            "valType": "number"
                        },
                        {
                            "valType": "number"
                        }
                    ]
                },
                "categoryarraysrc": {
                    "description": "Sets the source reference on plot.ly for  categoryarray .",
                    "valType": "string",
                    "role": "info"
                },
                "showtickprefix": {
                    "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all"
                },
                "role": "object",
                "tickangle": {
                    "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                    "valType": "angle",
                    "role": "style",
                    "dflt": "auto"
                },
                "showticksuffix": {
                    "description": "Same as `showtickprefix` but for tick suffixes.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all"
                },
                "showticklabels": {
                    "description": "Determines whether or not the tick labels are drawn.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "anchor": {
                    "description": "If set to an opposite-letter axis id (e.g. `xaxis2`, `yaxis`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "free",
                        "/^x([2-9]|[1-9][0-9]+)?$/",
                        "/^y([2-9]|[1-9][0-9]+)?$/"
                    ]
                },
                "tickvals": {
                    "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                    "valType": "data_array",
                    "role": "data"
                },
                "ticklen": {
                    "description": "Sets the tick length (in px).",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 5
                },
                "zerolinecolor": {
                    "description": "Sets the line color of the zero line.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "tickfont": {
                    "description": "Sets the tick font.",
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style"
                    },
                    "role": "object",
                    "family": {
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "autorange": {
                    "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        true,
                        false,
                        "reversed"
                    ],
                    "dflt": true
                },
                "linecolor": {
                    "description": "Sets the axis line color.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "rangemode": {
                    "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "normal",
                        "tozero",
                        "nonnegative"
                    ],
                    "dflt": "normal"
                },
                "zeroline": {
                    "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
                    "valType": "boolean",
                    "role": "style"
                },
                "ticktextsrc": {
                    "description": "Sets the source reference on plot.ly for  ticktext .",
                    "valType": "string",
                    "role": "info"
                },
                "dtick": {
                    "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                    "valType": "any",
                    "role": "style",
                    "dflt": 1
                },
                "rangeslider": {
                    "borderwidth": {
                        "description": "Sets the border color of the range slider.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "visible": {
                        "description": "Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "range": {
                        "description": "Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, then you must convert the date to unix time in milliseconds.",
                        "valType": "info_array",
                        "role": "info",
                        "items": [
                            {
                                "valType": "number"
                            },
                            {
                                "valType": "number"
                            }
                        ]
                    },
                    "bgcolor": {
                        "description": "Sets the background color of the range slider.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#fff"
                    },
                    "thickness": {
                        "description": "The height of the range slider as a fraction of the total plot area height.",
                        "min": 0,
                        "role": "style",
                        "max": 1,
                        "valType": "number",
                        "dflt": 0.15
                    },
                    "role": "object",
                    "bordercolor": {
                        "description": "Sets the border color of the range slider.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    }
                },
                "exponentformat": {
                    "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "none",
                        "e",
                        "E",
                        "power",
                        "SI",
                        "B"
                    ],
                    "dflt": "B"
                },
                "tickvalssrc": {
                    "description": "Sets the source reference on plot.ly for  tickvals .",
                    "valType": "string",
                    "role": "info"
                },
                "tick0": {
                    "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                    "valType": "number",
                    "role": "style",
                    "dflt": 0
                },
                "showgrid": {
                    "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                    "valType": "boolean",
                    "role": "style"
                },
                "tickwidth": {
                    "description": "Sets the tick width (in px).",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "domain": {
                    "description": "Sets the domain of this axis (in plot fraction).",
                    "valType": "info_array",
                    "role": "info",
                    "dflt": [
                        0,
                        1
                    ],
                    "items": [
                        {
                            "min": 0,
                            "max": 1,
                            "valType": "number"
                        },
                        {
                            "min": 0,
                            "max": 1,
                            "valType": "number"
                        }
                    ]
                },
                "position": {
                    "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 0
                },
                "title": {
                    "description": "Sets the title of this axis.",
                    "valType": "string",
                    "role": "info"
                },
                "categoryorder": {
                    "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "trace",
                        "category ascending",
                        "category descending",
                        "array"
                    ],
                    "dflt": "trace"
                },
                "overlaying": {
                    "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis. If *false*, this axis does not overlay any same-letter axes.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "free",
                        "/^x([2-9]|[1-9][0-9]+)?$/",
                        "/^y([2-9]|[1-9][0-9]+)?$/"
                    ]
                },
                "gridcolor": {
                    "description": "Sets the color of the grid lines.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#eee"
                },
                "showexponent": {
                    "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all"
                },
                "ticks": {
                    "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "outside",
                        "inside",
                        ""
                    ]
                },
                "rangeselector": {
                    "yanchor": {
                        "description": "Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "bottom"
                    },
                    "visible": {
                        "description": "Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to *date*.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "role": "object",
                    "borderwidth": {
                        "description": "Sets the width (in px) of the border enclosing the range selector.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "x": {
                        "description": "Sets the x position (in normalized coordinates) of the range selector.",
                        "max": 3,
                        "valType": "number",
                        "role": "style",
                        "min": -2
                    },
                    "bgcolor": {
                        "description": "Sets the background color of the range selector buttons.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#eee"
                    },
                    "buttons": {
                        "role": "object",
                        "items": {
                            "button": {
                                "description": "Sets the specifications for each buttons. By default, a range selector comes with no buttons.",
                                "label": {
                                    "description": "Sets the text label to appear on the button.",
                                    "valType": "string",
                                    "role": "info"
                                },
                                "step": {
                                    "description": "The unit of measurement that the `count` value will set the range by.",
                                    "values": [
                                        "month",
                                        "year",
                                        "day",
                                        "hour",
                                        "minute",
                                        "second",
                                        "all"
                                    ],
                                    "role": "info",
                                    "valType": "enumerated",
                                    "dflt": "month"
                                },
                                "count": {
                                    "description": "Sets the number of steps to take to update the range. Use with `step` to specify the update interval.",
                                    "min": 0,
                                    "valType": "number",
                                    "role": "info",
                                    "dflt": 1
                                },
                                "role": "object",
                                "stepmode": {
                                    "description": "Sets the range update mode. If *backward*, the range update shifts the start of range back *count* times *step* milliseconds. If *todate*, the range update shifts the start of range back to the first timestamp from *count* times *step* milliseconds back. For example, with `step` set to *year* and `count` set to *1* the range update shifts the start of the range back to January 01 of the current year.",
                                    "values": [
                                        "backward",
                                        "todate"
                                    ],
                                    "role": "info",
                                    "valType": "enumerated",
                                    "dflt": "backward"
                                }
                            }
                        }
                    },
                    "y": {
                        "description": "Sets the y position (in normalized coordinates) of the range selector.",
                        "max": 3,
                        "valType": "number",
                        "role": "style",
                        "min": -2
                    },
                    "xanchor": {
                        "description": "Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left"
                    },
                    "font": {
                        "description": "Sets the font of the range selector button text.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "bordercolor": {
                        "description": "Sets the color of the border enclosing the range selector.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    }
                },
                "ticktext": {
                    "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                    "valType": "data_array",
                    "role": "data"
                },
                "nticks": {
                    "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                    "min": 0,
                    "valType": "integer",
                    "role": "style",
                    "dflt": 0
                },
                "tickformat": {
                    "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                    "valType": "string",
                    "role": "style",
                    "dflt": ""
                },
                "mirror": {
                    "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        true,
                        "ticks",
                        false,
                        "all",
                        "allticks"
                    ],
                    "dflt": false
                },
                "tickprefix": {
                    "description": "Sets a tick label prefix.",
                    "valType": "string",
                    "role": "style",
                    "dflt": ""
                }
            },
            "orientation": {
                "description": "For polar plots only. Rotates the entire polar by the given angle.",
                "valType": "angle",
                "role": "info"
            },
            "yaxis": {
                "color": {
                    "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "titlefont": {
                    "description": "Sets this axis' title font.",
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style"
                    },
                    "role": "object",
                    "family": {
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "side": {
                    "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "top",
                        "bottom",
                        "left",
                        "right"
                    ]
                },
                "zerolinewidth": {
                    "description": "Sets the width (in px) of the zero line.",
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "_isSubplotObj": true,
                "categoryarray": {
                    "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                    "valType": "data_array",
                    "role": "data"
                },
                "fixedrange": {
                    "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "showline": {
                    "description": "Determines whether or not a line bounding this axis is drawn.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "type": {
                    "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "-",
                        "linear",
                        "log",
                        "date",
                        "category"
                    ],
                    "dflt": "-"
                },
                "tickcolor": {
                    "description": "Sets the tick color.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "hoverformat": {
                    "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                    "valType": "string",
                    "role": "style",
                    "dflt": ""
                },
                "gridwidth": {
                    "description": "Sets the width (in px) of the grid lines.",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "ticksuffix": {
                    "description": "Sets a tick label suffix.",
                    "valType": "string",
                    "role": "style",
                    "dflt": ""
                },
                "tickmode": {
                    "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "auto",
                        "linear",
                        "array"
                    ]
                },
                "_deprecated": {
                    "autotick": {
                        "description": "Obsolete. Set `tickmode` to *auto* for old `autotick` *true* behavior. Set `tickmode` to *linear* for `autotick` *false*.",
                        "valType": "boolean",
                        "role": "info"
                    }
                },
                "linewidth": {
                    "description": "Sets the width (in px) of the axis line.",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "range": {
                    "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the date range from January 1st 1970 to November 4th, 2013, set the range from 0 to 1380844800000.0",
                    "valType": "info_array",
                    "role": "info",
                    "items": [
                        {
                            "valType": "number"
                        },
                        {
                            "valType": "number"
                        }
                    ]
                },
                "categoryarraysrc": {
                    "description": "Sets the source reference on plot.ly for  categoryarray .",
                    "valType": "string",
                    "role": "info"
                },
                "showtickprefix": {
                    "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all"
                },
                "role": "object",
                "tickangle": {
                    "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                    "valType": "angle",
                    "role": "style",
                    "dflt": "auto"
                },
                "showticksuffix": {
                    "description": "Same as `showtickprefix` but for tick suffixes.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all"
                },
                "showticklabels": {
                    "description": "Determines whether or not the tick labels are drawn.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "anchor": {
                    "description": "If set to an opposite-letter axis id (e.g. `xaxis2`, `yaxis`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "free",
                        "/^x([2-9]|[1-9][0-9]+)?$/",
                        "/^y([2-9]|[1-9][0-9]+)?$/"
                    ]
                },
                "tickvals": {
                    "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                    "valType": "data_array",
                    "role": "data"
                },
                "ticklen": {
                    "description": "Sets the tick length (in px).",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 5
                },
                "zerolinecolor": {
                    "description": "Sets the line color of the zero line.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "tickfont": {
                    "description": "Sets the tick font.",
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style"
                    },
                    "role": "object",
                    "family": {
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "autorange": {
                    "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        true,
                        false,
                        "reversed"
                    ],
                    "dflt": true
                },
                "linecolor": {
                    "description": "Sets the axis line color.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "rangemode": {
                    "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "normal",
                        "tozero",
                        "nonnegative"
                    ],
                    "dflt": "normal"
                },
                "zeroline": {
                    "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
                    "valType": "boolean",
                    "role": "style"
                },
                "ticktextsrc": {
                    "description": "Sets the source reference on plot.ly for  ticktext .",
                    "valType": "string",
                    "role": "info"
                },
                "dtick": {
                    "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                    "valType": "any",
                    "role": "style",
                    "dflt": 1
                },
                "rangeslider": {
                    "borderwidth": {
                        "description": "Sets the border color of the range slider.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "visible": {
                        "description": "Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "range": {
                        "description": "Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, then you must convert the date to unix time in milliseconds.",
                        "valType": "info_array",
                        "role": "info",
                        "items": [
                            {
                                "valType": "number"
                            },
                            {
                                "valType": "number"
                            }
                        ]
                    },
                    "bgcolor": {
                        "description": "Sets the background color of the range slider.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#fff"
                    },
                    "thickness": {
                        "description": "The height of the range slider as a fraction of the total plot area height.",
                        "min": 0,
                        "role": "style",
                        "max": 1,
                        "valType": "number",
                        "dflt": 0.15
                    },
                    "role": "object",
                    "bordercolor": {
                        "description": "Sets the border color of the range slider.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    }
                },
                "exponentformat": {
                    "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "none",
                        "e",
                        "E",
                        "power",
                        "SI",
                        "B"
                    ],
                    "dflt": "B"
                },
                "tickvalssrc": {
                    "description": "Sets the source reference on plot.ly for  tickvals .",
                    "valType": "string",
                    "role": "info"
                },
                "tick0": {
                    "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                    "valType": "number",
                    "role": "style",
                    "dflt": 0
                },
                "showgrid": {
                    "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                    "valType": "boolean",
                    "role": "style"
                },
                "tickwidth": {
                    "description": "Sets the tick width (in px).",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "domain": {
                    "description": "Sets the domain of this axis (in plot fraction).",
                    "valType": "info_array",
                    "role": "info",
                    "dflt": [
                        0,
                        1
                    ],
                    "items": [
                        {
                            "min": 0,
                            "max": 1,
                            "valType": "number"
                        },
                        {
                            "min": 0,
                            "max": 1,
                            "valType": "number"
                        }
                    ]
                },
                "position": {
                    "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 0
                },
                "title": {
                    "description": "Sets the title of this axis.",
                    "valType": "string",
                    "role": "info"
                },
                "categoryorder": {
                    "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "trace",
                        "category ascending",
                        "category descending",
                        "array"
                    ],
                    "dflt": "trace"
                },
                "overlaying": {
                    "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis. If *false*, this axis does not overlay any same-letter axes.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "free",
                        "/^x([2-9]|[1-9][0-9]+)?$/",
                        "/^y([2-9]|[1-9][0-9]+)?$/"
                    ]
                },
                "gridcolor": {
                    "description": "Sets the color of the grid lines.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#eee"
                },
                "showexponent": {
                    "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "all",
                        "first",
                        "last",
                        "none"
                    ],
                    "dflt": "all"
                },
                "ticks": {
                    "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "outside",
                        "inside",
                        ""
                    ]
                },
                "rangeselector": {
                    "yanchor": {
                        "description": "Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "bottom"
                    },
                    "visible": {
                        "description": "Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to *date*.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "role": "object",
                    "borderwidth": {
                        "description": "Sets the width (in px) of the border enclosing the range selector.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "x": {
                        "description": "Sets the x position (in normalized coordinates) of the range selector.",
                        "max": 3,
                        "valType": "number",
                        "role": "style",
                        "min": -2
                    },
                    "bgcolor": {
                        "description": "Sets the background color of the range selector buttons.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#eee"
                    },
                    "buttons": {
                        "role": "object",
                        "items": {
                            "button": {
                                "description": "Sets the specifications for each buttons. By default, a range selector comes with no buttons.",
                                "label": {
                                    "description": "Sets the text label to appear on the button.",
                                    "valType": "string",
                                    "role": "info"
                                },
                                "step": {
                                    "description": "The unit of measurement that the `count` value will set the range by.",
                                    "values": [
                                        "month",
                                        "year",
                                        "day",
                                        "hour",
                                        "minute",
                                        "second",
                                        "all"
                                    ],
                                    "role": "info",
                                    "valType": "enumerated",
                                    "dflt": "month"
                                },
                                "count": {
                                    "description": "Sets the number of steps to take to update the range. Use with `step` to specify the update interval.",
                                    "min": 0,
                                    "valType": "number",
                                    "role": "info",
                                    "dflt": 1
                                },
                                "role": "object",
                                "stepmode": {
                                    "description": "Sets the range update mode. If *backward*, the range update shifts the start of range back *count* times *step* milliseconds. If *todate*, the range update shifts the start of range back to the first timestamp from *count* times *step* milliseconds back. For example, with `step` set to *year* and `count` set to *1* the range update shifts the start of the range back to January 01 of the current year.",
                                    "values": [
                                        "backward",
                                        "todate"
                                    ],
                                    "role": "info",
                                    "valType": "enumerated",
                                    "dflt": "backward"
                                }
                            }
                        }
                    },
                    "y": {
                        "description": "Sets the y position (in normalized coordinates) of the range selector.",
                        "max": 3,
                        "valType": "number",
                        "role": "style",
                        "min": -2
                    },
                    "xanchor": {
                        "description": "Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left"
                    },
                    "font": {
                        "description": "Sets the font of the range selector button text.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "bordercolor": {
                        "description": "Sets the color of the border enclosing the range selector.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    }
                },
                "ticktext": {
                    "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                    "valType": "data_array",
                    "role": "data"
                },
                "nticks": {
                    "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                    "min": 0,
                    "valType": "integer",
                    "role": "style",
                    "dflt": 0
                },
                "tickformat": {
                    "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                    "valType": "string",
                    "role": "style",
                    "dflt": ""
                },
                "mirror": {
                    "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        true,
                        "ticks",
                        false,
                        "all",
                        "allticks"
                    ],
                    "dflt": false
                },
                "tickprefix": {
                    "description": "Sets a tick label prefix.",
                    "valType": "string",
                    "role": "style",
                    "dflt": ""
                }
            },
            "geo": {
                "projection": {
                    "type": {
                        "description": "Sets the projection type.",
                        "values": [
                            "equirectangular",
                            "mercator",
                            "orthographic",
                            "natural earth",
                            "kavrayskiy7",
                            "miller",
                            "robinson",
                            "eckert4",
                            "azimuthal equal area",
                            "azimuthal equidistant",
                            "conic equal area",
                            "conic conformal",
                            "conic equidistant",
                            "gnomonic",
                            "stereographic",
                            "mollweide",
                            "hammer",
                            "transverse mercator",
                            "albers usa"
                        ],
                        "role": "info",
                        "valType": "enumerated"
                    },
                    "parallels": {
                        "description": "For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.",
                        "valType": "info_array",
                        "role": "info",
                        "items": [
                            {
                                "valType": "number"
                            },
                            {
                                "valType": "number"
                            }
                        ]
                    },
                    "role": "object",
                    "scale": {
                        "description": "Zooms in or out on the map view.",
                        "min": 0,
                        "role": "info",
                        "max": 10,
                        "valType": "number",
                        "dflt": 1
                    },
                    "rotation": {
                        "lat": {
                            "description": "Rotates the map along meridians (in degrees North).",
                            "valType": "number",
                            "role": "info"
                        },
                        "roll": {
                            "description": "Roll the map (in degrees) For example, a roll of *180* makes the map appear upside down.",
                            "valType": "number",
                            "role": "info"
                        },
                        "role": "object",
                        "lon": {
                            "description": "Rotates the map along parallels (in degrees East).",
                            "valType": "number",
                            "role": "info"
                        }
                    }
                },
                "countrywidth": {
                    "description": "Sets line width (in px) of the country boundaries.",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "showland": {
                    "description": "Sets whether or not land masses are filled in color.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "lataxis": {
                    "range": {
                        "description": "Sets the range of this axis (in degrees).",
                        "valType": "info_array",
                        "role": "info",
                        "items": [
                            {
                                "valType": "number"
                            },
                            {
                                "valType": "number"
                            }
                        ]
                    },
                    "dtick": {
                        "description": "Sets the graticule's longitude/latitude tick step.",
                        "valType": "number",
                        "role": "info"
                    },
                    "gridwidth": {
                        "description": "Sets the graticule's stroke width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "gridcolor": {
                        "description": "Sets the graticule's stroke color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#eee"
                    },
                    "role": "object",
                    "tick0": {
                        "description": "Sets the graticule's starting tick longitude/latitude.",
                        "valType": "number",
                        "role": "info"
                    },
                    "showgrid": {
                        "description": "Sets whether or not graticule are shown on the map.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    }
                },
                "_isSubplotObj": true,
                "subunitwidth": {
                    "description": "Sets the stroke width (in px) of the subunits boundaries.",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "scope": {
                    "description": "Set the scope of the map.",
                    "values": [
                        "world",
                        "usa",
                        "europe",
                        "asia",
                        "africa",
                        "north america",
                        "south america"
                    ],
                    "role": "info",
                    "valType": "enumerated",
                    "dflt": "world"
                },
                "lonaxis": {
                    "range": {
                        "description": "Sets the range of this axis (in degrees).",
                        "valType": "info_array",
                        "role": "info",
                        "items": [
                            {
                                "valType": "number"
                            },
                            {
                                "valType": "number"
                            }
                        ]
                    },
                    "dtick": {
                        "description": "Sets the graticule's longitude/latitude tick step.",
                        "valType": "number",
                        "role": "info"
                    },
                    "gridwidth": {
                        "description": "Sets the graticule's stroke width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "gridcolor": {
                        "description": "Sets the graticule's stroke color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#eee"
                    },
                    "role": "object",
                    "tick0": {
                        "description": "Sets the graticule's starting tick longitude/latitude.",
                        "valType": "number",
                        "role": "info"
                    },
                    "showgrid": {
                        "description": "Sets whether or not graticule are shown on the map.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    }
                },
                "oceancolor": {
                    "description": "Sets the ocean color",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#3399FF"
                },
                "showrivers": {
                    "description": "Sets whether or not rivers are drawn.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "showcountries": {
                    "description": "Sets whether or not country boundaries are drawn.",
                    "valType": "boolean",
                    "role": "info"
                },
                "subunitcolor": {
                    "description": "Sets the color of the subunits boundaries.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "lakecolor": {
                    "description": "Sets the color of the lakes.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#3399FF"
                },
                "domain": {
                    "y": {
                        "description": "Sets the vertical domain of this map (in plot fraction).",
                        "valType": "info_array",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ],
                        "items": [
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            },
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            }
                        ]
                    },
                    "x": {
                        "description": "Sets the horizontal domain of this map (in plot fraction).",
                        "valType": "info_array",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ],
                        "items": [
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            },
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            }
                        ]
                    },
                    "role": "object"
                },
                "countrycolor": {
                    "description": "Sets line color of the country boundaries.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "showsubunits": {
                    "description": "Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.",
                    "valType": "boolean",
                    "role": "info"
                },
                "role": "object",
                "rivercolor": {
                    "description": "Sets color of the rivers.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#3399FF"
                },
                "showcoastlines": {
                    "description": "Sets whether or not the coastlines are drawn.",
                    "valType": "boolean",
                    "role": "info"
                },
                "riverwidth": {
                    "description": "Sets the stroke width (in px) of the rivers.",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "landcolor": {
                    "description": "Sets the land mass color.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#F0DC82"
                },
                "framecolor": {
                    "description": "Sets the color the frame.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "showlakes": {
                    "description": "Sets whether or not lakes are drawn.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "coastlinecolor": {
                    "description": "Sets the coastline color.",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#444"
                },
                "framewidth": {
                    "description": "Sets the stroke width (in px) of the frame.",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "bgcolor": {
                    "description": "Set the background color of the map",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#fff"
                },
                "showocean": {
                    "description": "Sets whether or not oceans are filled in color.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "coastlinewidth": {
                    "description": "Sets the coastline stroke width (in px).",
                    "min": 0,
                    "valType": "number",
                    "role": "style",
                    "dflt": 1
                },
                "resolution": {
                    "description": "Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.",
                    "values": [
                        110,
                        50
                    ],
                    "dflt": 110,
                    "coerceNumber": true,
                    "valType": "enumerated",
                    "role": "info"
                },
                "showframe": {
                    "description": "Sets whether or not a frame is drawn around the map.",
                    "valType": "boolean",
                    "role": "info"
                }
            },
            "ternary": {
                "domain": {
                    "y": {
                        "description": "Sets the vertical domain of this subplot (in plot fraction).",
                        "valType": "info_array",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ],
                        "items": [
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            },
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            }
                        ]
                    },
                    "x": {
                        "description": "Sets the horizontal domain of this subplot (in plot fraction).",
                        "valType": "info_array",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ],
                        "items": [
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            },
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            }
                        ]
                    },
                    "role": "object"
                },
                "caxis": {
                    "titlefont": {
                        "description": "Sets this axis' title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "linecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "showline": {
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "min": {
                        "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 0
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ]
                    },
                    "gridwidth": {
                        "description": "Sets the width (in px) of the grid lines.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "showgrid": {
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "linewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "title": {
                        "description": "Sets the title of this axis.",
                        "valType": "string",
                        "role": "info"
                    },
                    "gridcolor": {
                        "description": "Sets the color of the grid lines.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#eee"
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "role": "object",
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "hoverformat": {
                        "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 1,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 6
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "color": {
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    }
                },
                "aaxis": {
                    "titlefont": {
                        "description": "Sets this axis' title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "linecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "showline": {
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "min": {
                        "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 0
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ]
                    },
                    "gridwidth": {
                        "description": "Sets the width (in px) of the grid lines.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "showgrid": {
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "linewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "title": {
                        "description": "Sets the title of this axis.",
                        "valType": "string",
                        "role": "info"
                    },
                    "gridcolor": {
                        "description": "Sets the color of the grid lines.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#eee"
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "role": "object",
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "hoverformat": {
                        "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 1,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 6
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "color": {
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    }
                },
                "role": "object",
                "_isSubplotObj": true,
                "sum": {
                    "description": "The number each triplet should sum to, and the maximum range of each axis",
                    "min": 0,
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "bgcolor": {
                    "description": "Set the background color of the subplot",
                    "valType": "color",
                    "role": "style",
                    "dflt": "#fff"
                },
                "baxis": {
                    "titlefont": {
                        "description": "Sets this axis' title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "linecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "showline": {
                        "description": "Determines whether or not a line bounding this axis is drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "min": {
                        "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 0
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ]
                    },
                    "gridwidth": {
                        "description": "Sets the width (in px) of the grid lines.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "showgrid": {
                        "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "linewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "title": {
                        "description": "Sets the title of this axis.",
                        "valType": "string",
                        "role": "info"
                    },
                    "gridcolor": {
                        "description": "Sets the color of the grid lines.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#eee"
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "role": "object",
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "hoverformat": {
                        "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 1,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 6
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "color": {
                        "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    }
                }
            },
            "dragmode": {
                "description": "Determines the mode of drag interactions. *select* and *lasso* apply only to scatter traces with markers or text. *orbit* and *turntable* apply only to 3D scenes.",
                "values": [
                    "zoom",
                    "pan",
                    "select",
                    "lasso",
                    "orbit",
                    "turntable"
                ],
                "role": "info",
                "valType": "enumerated",
                "dflt": "zoom"
            },
            "width": {
                "description": "Sets the plot's width (in px).",
                "min": 10,
                "valType": "number",
                "role": "info",
                "dflt": 700
            },
            "height": {
                "description": "Sets the plot's height (in px).",
                "min": 10,
                "valType": "number",
                "role": "info",
                "dflt": 450
            },
            "separators": {
                "description": "Sets the decimal and thousand separators. For example, *. * puts a '.' before decimals and a space between thousands.",
                "valType": "string",
                "role": "style",
                "dflt": ".,"
            },
            "angularaxis": {
                "domain": {
                    "description": "Polar chart subplots are not supported yet. This key has currently no effect.",
                    "valType": "info_array",
                    "role": "info",
                    "dflt": [
                        0,
                        1
                    ],
                    "items": [
                        {
                            "min": 0,
                            "max": 1,
                            "valType": "number"
                        },
                        {
                            "min": 0,
                            "max": 1,
                            "valType": "number"
                        }
                    ]
                },
                "visible": {
                    "description": "Determines whether or not this axis will be visible.",
                    "valType": "boolean",
                    "role": "info"
                },
                "range": {
                    "description": "Defines the start and end point of this angular axis.",
                    "valType": "info_array",
                    "role": "info",
                    "items": [
                        {
                            "valType": "number",
                            "dflt": 0
                        },
                        {
                            "valType": "number",
                            "dflt": 360
                        }
                    ]
                },
                "endpadding": {
                    "valType": "number",
                    "role": "style"
                },
                "showticklabels": {
                    "description": "Determines whether or not the angular axis ticks will feature tick labels.",
                    "valType": "boolean",
                    "role": "style"
                },
                "ticksuffix": {
                    "description": "Sets the length of the tick lines on this angular axis.",
                    "valType": "string",
                    "role": "style"
                },
                "tickorientation": {
                    "description": "Sets the orientation (from the paper perspective) of the angular axis tick labels.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "horizontal",
                        "vertical"
                    ]
                },
                "role": "object",
                "showline": {
                    "description": "Determines whether or not the line bounding this angular axis will be shown on the figure.",
                    "valType": "boolean",
                    "role": "style"
                },
                "tickcolor": {
                    "description": "Sets the color of the tick lines on this angular axis.",
                    "valType": "color",
                    "role": "style"
                },
                "ticklen": {
                    "description": "Sets the length of the tick lines on this angular axis.",
                    "min": 0,
                    "valType": "number",
                    "role": "style"
                }
            }
        }
    },
    "defs": {
        "valObjects": {
            "boolean": {
                "description": "A boolean (true/false) value.",
                "otherOpts": [
                    "dflt"
                ],
                "requiredOpts": []
            },
            "flaglist": {
                "description": "A string representing a combination of flags (order does not matter here). Combine any of the available `flags` with *+*. (e.g. ('lines+markers')). Values in `extras` cannot be combined.",
                "otherOpts": [
                    "dflt",
                    "extras"
                ],
                "requiredOpts": [
                    "flags"
                ]
            },
            "data_array": {
                "description": "An {array} of data. The value MUST be an {array}, or we ignore it.",
                "otherOpts": [
                    "dflt"
                ],
                "requiredOpts": []
            },
            "info_array": {
                "description": "An {array} of plot information.",
                "otherOpts": [
                    "dflt"
                ],
                "requiredOpts": [
                    "items"
                ]
            },
            "integer": {
                "description": "An integer or an integer inside a string. When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.",
                "otherOpts": [
                    "dflt",
                    "min",
                    "max"
                ],
                "requiredOpts": []
            },
            "angle": {
                "description": "A number (in degree) between -180 and 180.",
                "otherOpts": [
                    "dflt"
                ],
                "requiredOpts": []
            },
            "number": {
                "description": "A number or a numeric value (e.g. a number inside a string). When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.",
                "otherOpts": [
                    "dflt",
                    "min",
                    "max",
                    "arrayOk"
                ],
                "requiredOpts": []
            },
            "any": {
                "description": "Any type.",
                "otherOpts": [
                    "dflt"
                ],
                "requiredOpts": []
            },
            "colorscale": {
                "description": "A Plotly colorscale either picked by a name: (any of Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis ) customized as an {array} of 2-element {arrays} where the first element is the normalized color level value (starting at *0* and ending at *1*), and the second item is a valid color string.",
                "otherOpts": [
                    "dflt"
                ],
                "requiredOpts": []
            },
            "color": {
                "description": "A string describing color. Supported formats: - hex (e.g. '#d3d3d3') - rgb (e.g. 'rgb(255, 0, 0)') - rgba (e.g. 'rgb(255, 0, 0, 0.5)') - hsl (e.g. 'hsl(0, 100%, 50%)') - hsv (e.g. 'hsv(0, 100%, 100%)') - named colors (full list: http://www.w3.org/TR/css3-color/#svg-color)",
                "otherOpts": [
                    "dflt",
                    "arrayOk"
                ],
                "requiredOpts": []
            },
            "string": {
                "description": "A string value. Numbers are converted to strings except for attributes with `strict` set to true.",
                "otherOpts": [
                    "dflt",
                    "noBlank",
                    "strict",
                    "arrayOk",
                    "values"
                ],
                "requiredOpts": []
            },
            "subplotid": {
                "description": "An id string of a subplot type (given by dflt), optionally followed by an integer >1. e.g. if dflt='geo', we can  have 'geo', 'geo2', 'geo3', ...",
                "otherOpts": [
                    "dflt"
                ],
                "requiredOpts": []
            },
            "enumerated": {
                "description": "Enumerated value type. The available values are listed in `values`.",
                "otherOpts": [
                    "dflt",
                    "coerceNumber",
                    "arrayOk"
                ],
                "requiredOpts": [
                    "values"
                ]
            }
        },
        "metaKeys": [
            "_isSubplotObj",
            "_isLinkedToArray",
            "_deprecated",
            "description",
            "role"
        ]
    },
    "traces": {
        "scatter": {
            "description": "The scatter trace type encompasses line charts, scatter charts, text charts, and bubble charts. The data visualized as scatter point or lines is set in `x` and `y`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays.",
            "attributes": {
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "xaxis": {
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "x"
                },
                "dy": {
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "connectgaps": {
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                },
                "dx": {
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "type": "scatter",
                "error_x": {
                    "thickness": {
                        "description": "Sets the thickness (in px) of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "value": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "array": {
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "valType": "number",
                            "role": "style"
                        }
                    },
                    "arraysrc": {
                        "description": "Sets the source reference on plot.ly for  array .",
                        "valType": "string",
                        "role": "info"
                    },
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "role": "object",
                    "arrayminus": {
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "traceref": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "type": {
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ]
                    },
                    "visible": {
                        "description": "Determines whether or not this set of error bars is visible.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "width": {
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the stoke color of the error bars.",
                        "valType": "color",
                        "role": "style"
                    },
                    "valueminus": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "symmetric": {
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "tracerefminus": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "arrayminussrc": {
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "text": {
                    "dflt": "",
                    "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.",
                    "valType": "string",
                    "role": "info",
                    "arrayOk": true
                },
                "rsrc": {
                    "description": "Sets the source reference on plot.ly for  r .",
                    "valType": "string",
                    "role": "info"
                },
                "x": {
                    "description": "Sets the x coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "t": {
                    "description": "For polar chart only.Sets the angular coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "r": {
                    "description": "For polar chart only.Sets the radial coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "fillcolor": {
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "valType": "color",
                    "role": "style"
                },
                "y": {
                    "description": "Sets the y coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "y0": {
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "valType": "any",
                    "role": "info",
                    "dflt": 0
                },
                "fill": {
                    "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "none",
                        "tozeroy",
                        "tozerox",
                        "tonexty",
                        "tonextx",
                        "toself",
                        "tonext"
                    ],
                    "dflt": "none"
                },
                "textposition": {
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "dflt": "middle center",
                    "valType": "enumerated",
                    "role": "style",
                    "arrayOk": true
                },
                "yaxis": {
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "y"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "textfont": {
                    "description": "Sets the text font.",
                    "family": {
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true,
                        "arrayOk": true
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style",
                        "arrayOk": true
                    },
                    "sizesrc": {
                        "description": "Sets the source reference on plot.ly for  size .",
                        "valType": "string",
                        "role": "info"
                    },
                    "familysrc": {
                        "description": "Sets the source reference on plot.ly for  family .",
                        "valType": "string",
                        "role": "info"
                    },
                    "color": {
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "role": "object",
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "error_y": {
                    "thickness": {
                        "description": "Sets the thickness (in px) of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "value": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "array": {
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "valType": "number",
                            "role": "style"
                        }
                    },
                    "arraysrc": {
                        "description": "Sets the source reference on plot.ly for  array .",
                        "valType": "string",
                        "role": "info"
                    },
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "role": "object",
                    "arrayminus": {
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "traceref": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "type": {
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ]
                    },
                    "visible": {
                        "description": "Determines whether or not this set of error bars is visible.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "width": {
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the stoke color of the error bars.",
                        "valType": "color",
                        "role": "style"
                    },
                    "valueminus": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "symmetric": {
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "tracerefminus": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "arrayminussrc": {
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "line": {
                    "width": {
                        "description": "Sets the line width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "shape": {
                        "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "linear",
                            "spline",
                            "hv",
                            "vh",
                            "hvh",
                            "vhv"
                        ],
                        "dflt": "linear"
                    },
                    "color": {
                        "description": "Sets the line color.",
                        "valType": "color",
                        "role": "style"
                    },
                    "smoothing": {
                        "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
                        "min": 0,
                        "role": "style",
                        "max": 1.3,
                        "valType": "number",
                        "dflt": 1
                    },
                    "role": "object",
                    "dash": {
                        "description": "Sets the style of the lines. Set to a dash string type or a dash length in px.",
                        "valType": "string",
                        "role": "style",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid"
                    }
                },
                "textpositionsrc": {
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "valType": "string",
                    "role": "info"
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "mode": {
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "valType": "flaglist",
                    "role": "info",
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*."
                },
                "tsrc": {
                    "description": "Sets the source reference on plot.ly for  t .",
                    "valType": "string",
                    "role": "info"
                },
                "marker": {
                    "reversescale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the colorscale.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": false
                    },
                    "autocolorscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not the colorscale is picked using values inside `marker.color`.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "opacitysrc": {
                        "description": "Sets the source reference on plot.ly for  opacity .",
                        "valType": "string",
                        "role": "info"
                    },
                    "sizemin": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "sizemode": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "dflt": "diameter"
                    },
                    "symbolsrc": {
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "valType": "string",
                        "role": "info"
                    },
                    "colorbar": {
                        "tickangle": {
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "valType": "angle",
                            "role": "style",
                            "dflt": "auto"
                        },
                        "thickness": {
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 30
                        },
                        "titlefont": {
                            "description": "Sets this color bar's title font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "ypad": {
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "tickwidth": {
                            "description": "Sets the tick width (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "titleside": {
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "top"
                        },
                        "tickfont": {
                            "description": "Sets the tick font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "bgcolor": {
                            "description": "Sets the color of padded area.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "rgba(0,0,0,0)"
                        },
                        "len": {
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "lenmode": {
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "fraction"
                        },
                        "yanchor": {
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "middle"
                        },
                        "ticktextsrc": {
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "valType": "string",
                            "role": "info"
                        },
                        "ticktext": {
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "xpad": {
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "thicknessmode": {
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "pixels"
                        },
                        "exponentformat": {
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "dflt": "B"
                        },
                        "tickvalssrc": {
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "valType": "string",
                            "role": "info"
                        },
                        "outlinewidth": {
                            "description": "Sets the width (in px) of the axis line.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "tickmode": {
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ]
                        },
                        "showticksuffix": {
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "y": {
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 0.5
                        },
                        "showexponent": {
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "borderwidth": {
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "x": {
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 1.02
                        },
                        "title": {
                            "description": "Sets the title of the color bar.",
                            "valType": "string",
                            "role": "info",
                            "dflt": "Click to enter colorscale title"
                        },
                        "tickvals": {
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "tick0": {
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "showtickprefix": {
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "ticks": {
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "dflt": ""
                        },
                        "tickcolor": {
                            "description": "Sets the tick color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "bordercolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "outlinecolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "dtick": {
                            "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                            "valType": "any",
                            "role": "style",
                            "dflt": 1
                        },
                        "nticks": {
                            "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                            "min": 0,
                            "valType": "integer",
                            "role": "style",
                            "dflt": 0
                        },
                        "showticklabels": {
                            "description": "Determines whether or not the tick labels are drawn.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "tickformat": {
                            "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "role": "object",
                        "xanchor": {
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "left"
                        },
                        "tickprefix": {
                            "description": "Sets a tick label prefix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticksuffix": {
                            "description": "Sets a tick label suffix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticklen": {
                            "description": "Sets the tick length (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 5
                        }
                    },
                    "cauto": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines the whether or not the color domain is computed automatically.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "colorscale": {
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`.",
                        "valType": "colorscale",
                        "role": "style"
                    },
                    "opacity": {
                        "description": "Sets the marker opacity.",
                        "min": 0,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "arrayOk": true
                    },
                    "size": {
                        "description": "Sets the marker size (in px).",
                        "min": 0,
                        "role": "style",
                        "valType": "number",
                        "dflt": 6,
                        "arrayOk": true
                    },
                    "cmin": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "sizeref": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "showscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    },
                    "maxdisplayed": {
                        "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "symbol": {
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "dflt": "circle",
                        "valType": "enumerated",
                        "role": "style",
                        "arrayOk": true
                    },
                    "role": "object",
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    },
                    "line": {
                        "reversescale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the colorscale.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": false
                        },
                        "autocolorscale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether or not the colorscale is picked using the sign of values inside `marker.line.color`.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "role": "object",
                        "width": {
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "arrayOk": true
                        },
                        "colorscale": {
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`.",
                            "valType": "colorscale",
                            "role": "style"
                        },
                        "widthsrc": {
                            "description": "Sets the source reference on plot.ly for  width .",
                            "valType": "string",
                            "role": "info"
                        },
                        "color": {
                            "description": "Sets the marker outline color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "valType": "color",
                            "role": "style",
                            "arrayOk": true
                        },
                        "cmax": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "cauto": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines the whether or not the color domain is computed with respect to the input data.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "cmin": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "colorsrc": {
                            "description": "Sets the source reference on plot.ly for  color .",
                            "valType": "string",
                            "role": "info"
                        }
                    },
                    "sizesrc": {
                        "description": "Sets the source reference on plot.ly for  size .",
                        "valType": "string",
                        "role": "info"
                    },
                    "color": {
                        "description": "Sets the marker color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "cmax": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    }
                },
                "x0": {
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "valType": "any",
                    "role": "info",
                    "dflt": 0
                }
            }
        },
        "bar": {
            "description": "The data visualized by the span of the bars is set in `y` if `orientation` is set th *v* (the default) and the labels are set in `x`. By setting `orientation` to *h*, the roles are interchanged.",
            "layoutAttributes": {
                "barnorm": {
                    "description": "Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divide by the sum of the values at the location coordinate. With *percent*, the results form *fraction* are presented in percents.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "",
                        "fraction",
                        "percent"
                    ],
                    "dflt": ""
                },
                "barmode": {
                    "description": "Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "stack",
                        "group",
                        "overlay"
                    ],
                    "dflt": "group"
                },
                "bargap": {
                    "description": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.",
                    "max": 1,
                    "valType": "number",
                    "role": "style",
                    "min": 0
                },
                "bargroupgap": {
                    "description": "Sets the gap (in plot fraction) between bars of the same location coordinate.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 0
                }
            },
            "attributes": {
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "xaxis": {
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "x"
                },
                "dy": {
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "t": {
                    "description": "For polar chart only.Sets the angular coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                },
                "dx": {
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "error_x": {
                    "thickness": {
                        "description": "Sets the thickness (in px) of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "value": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "array": {
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "valType": "number",
                            "role": "style"
                        }
                    },
                    "arraysrc": {
                        "description": "Sets the source reference on plot.ly for  array .",
                        "valType": "string",
                        "role": "info"
                    },
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "role": "object",
                    "arrayminus": {
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "traceref": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "type": {
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ]
                    },
                    "visible": {
                        "description": "Determines whether or not this set of error bars is visible.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "width": {
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the stoke color of the error bars.",
                        "valType": "color",
                        "role": "style"
                    },
                    "valueminus": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "symmetric": {
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "tracerefminus": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "arrayminussrc": {
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "text": {
                    "dflt": "",
                    "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.",
                    "valType": "string",
                    "role": "info",
                    "arrayOk": true
                },
                "rsrc": {
                    "description": "Sets the source reference on plot.ly for  r .",
                    "valType": "string",
                    "role": "info"
                },
                "x": {
                    "description": "Sets the x coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "r": {
                    "description": "For polar chart only.Sets the radial coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "_deprecated": {
                    "bardir": {
                        "description": "Renamed to `orientation`.",
                        "values": [
                            "v",
                            "h"
                        ],
                        "role": "info",
                        "valType": "enumerated"
                    }
                },
                "y": {
                    "description": "Sets the y coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "type": "bar",
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "y0": {
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "valType": "any",
                    "role": "info",
                    "dflt": 0
                },
                "orientation": {
                    "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
                    "values": [
                        "v",
                        "h"
                    ],
                    "role": "info",
                    "valType": "enumerated"
                },
                "yaxis": {
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "y"
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "error_y": {
                    "thickness": {
                        "description": "Sets the thickness (in px) of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "value": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "array": {
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "valType": "number",
                            "role": "style"
                        }
                    },
                    "arraysrc": {
                        "description": "Sets the source reference on plot.ly for  array .",
                        "valType": "string",
                        "role": "info"
                    },
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "role": "object",
                    "arrayminus": {
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "traceref": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "type": {
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ]
                    },
                    "visible": {
                        "description": "Determines whether or not this set of error bars is visible.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "width": {
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the stoke color of the error bars.",
                        "valType": "color",
                        "role": "style"
                    },
                    "valueminus": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "symmetric": {
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "tracerefminus": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "arrayminussrc": {
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "x0": {
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "valType": "any",
                    "role": "info",
                    "dflt": 0
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "tsrc": {
                    "description": "Sets the source reference on plot.ly for  t .",
                    "valType": "string",
                    "role": "info"
                },
                "marker": {
                    "reversescale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the colorscale.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": false
                    },
                    "autocolorscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not the colorscale is picked using values inside `marker.color`.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "cmin": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "role": "object",
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    },
                    "colorbar": {
                        "tickangle": {
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "valType": "angle",
                            "role": "style",
                            "dflt": "auto"
                        },
                        "thickness": {
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 30
                        },
                        "titlefont": {
                            "description": "Sets this color bar's title font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "ypad": {
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "tickwidth": {
                            "description": "Sets the tick width (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "titleside": {
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "top"
                        },
                        "tickfont": {
                            "description": "Sets the tick font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "bgcolor": {
                            "description": "Sets the color of padded area.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "rgba(0,0,0,0)"
                        },
                        "len": {
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "lenmode": {
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "fraction"
                        },
                        "yanchor": {
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "middle"
                        },
                        "ticktextsrc": {
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "valType": "string",
                            "role": "info"
                        },
                        "ticktext": {
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "xpad": {
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "thicknessmode": {
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "pixels"
                        },
                        "exponentformat": {
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "dflt": "B"
                        },
                        "tickvalssrc": {
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "valType": "string",
                            "role": "info"
                        },
                        "outlinewidth": {
                            "description": "Sets the width (in px) of the axis line.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "tickmode": {
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ]
                        },
                        "showticksuffix": {
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "y": {
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 0.5
                        },
                        "showexponent": {
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "borderwidth": {
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "x": {
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 1.02
                        },
                        "title": {
                            "description": "Sets the title of the color bar.",
                            "valType": "string",
                            "role": "info",
                            "dflt": "Click to enter colorscale title"
                        },
                        "tickvals": {
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "tick0": {
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "showtickprefix": {
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "ticks": {
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "dflt": ""
                        },
                        "tickcolor": {
                            "description": "Sets the tick color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "bordercolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "outlinecolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "dtick": {
                            "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                            "valType": "any",
                            "role": "style",
                            "dflt": 1
                        },
                        "nticks": {
                            "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                            "min": 0,
                            "valType": "integer",
                            "role": "style",
                            "dflt": 0
                        },
                        "showticklabels": {
                            "description": "Determines whether or not the tick labels are drawn.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "tickformat": {
                            "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "role": "object",
                        "xanchor": {
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "left"
                        },
                        "tickprefix": {
                            "description": "Sets a tick label prefix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticksuffix": {
                            "description": "Sets a tick label suffix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticklen": {
                            "description": "Sets the tick length (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 5
                        }
                    },
                    "cauto": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines the whether or not the color domain is computed automatically.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "line": {
                        "reversescale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the colorscale.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": false
                        },
                        "autocolorscale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether or not the colorscale is picked using the sign of values inside `marker.line.color`.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "role": "object",
                        "width": {
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "arrayOk": true
                        },
                        "colorscale": {
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`.",
                            "valType": "colorscale",
                            "role": "style"
                        },
                        "widthsrc": {
                            "description": "Sets the source reference on plot.ly for  width .",
                            "valType": "string",
                            "role": "info"
                        },
                        "color": {
                            "description": "Sets the marker outline color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "valType": "color",
                            "role": "style",
                            "arrayOk": true
                        },
                        "cmax": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "cauto": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines the whether or not the color domain is computed with respect to the input data.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "cmin": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "colorsrc": {
                            "description": "Sets the source reference on plot.ly for  color .",
                            "valType": "string",
                            "role": "info"
                        }
                    },
                    "colorscale": {
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`.",
                        "valType": "colorscale",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the marker color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "cmax": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "showscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    }
                }
            }
        },
        "histogram": {
            "description": "The sample data from which statistics are computed is set in `x` for vertically spanning histograms and in `y` for horizontally spanning histograms. Binning options are set `xbins` and `ybins` respectively if no aggregation data is provided.",
            "layoutAttributes": {
                "barnorm": {
                    "description": "Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divide by the sum of the values at the location coordinate. With *percent*, the results form *fraction* are presented in percents.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "",
                        "fraction",
                        "percent"
                    ],
                    "dflt": ""
                },
                "barmode": {
                    "description": "Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "stack",
                        "group",
                        "overlay"
                    ],
                    "dflt": "group"
                },
                "bargap": {
                    "description": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.",
                    "max": 1,
                    "valType": "number",
                    "role": "style",
                    "min": 0
                },
                "bargroupgap": {
                    "description": "Sets the gap (in plot fraction) between bars of the same location coordinate.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 0
                }
            },
            "attributes": {
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "xaxis": {
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "x"
                },
                "autobinx": {
                    "description": "Determines whether or not the x axis bin attributes are picked by an algorithm.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "ybins": {
                    "end": {
                        "description": "Sets the end value for the y axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "role": "object",
                    "start": {
                        "description": "Sets the starting value for the y axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "size": {
                        "description": "Sets the step in-between value each y axis bin.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    }
                },
                "autobiny": {
                    "description": "Determines whether or not the y axis bin attributes are picked by an algorithm.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "text": {
                    "dflt": "",
                    "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.",
                    "valType": "string",
                    "role": "info",
                    "arrayOk": true
                },
                "histfunc": {
                    "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "count",
                        "sum",
                        "avg",
                        "min",
                        "max"
                    ],
                    "dflt": "count"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "xbins": {
                    "end": {
                        "description": "Sets the end value for the x axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "role": "object",
                    "start": {
                        "description": "Sets the starting value for the x axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "size": {
                        "description": "Sets the step in-between value each x axis bin.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    }
                },
                "_deprecated": {
                    "bardir": {
                        "description": "Renamed to `orientation`.",
                        "values": [
                            "v",
                            "h"
                        ],
                        "role": "info",
                        "valType": "enumerated"
                    }
                },
                "y": {
                    "description": "Sets the sample data to be binned on the y axis.",
                    "valType": "data_array",
                    "role": "data"
                },
                "type": "histogram",
                "nbinsy": {
                    "description": "Sets the number of y axis bins.",
                    "min": 0,
                    "valType": "integer",
                    "role": "style",
                    "dflt": 0
                },
                "nbinsx": {
                    "description": "Sets the number of x axis bins.",
                    "min": 0,
                    "valType": "integer",
                    "role": "style",
                    "dflt": 0
                },
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "error_x": {
                    "thickness": {
                        "description": "Sets the thickness (in px) of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "value": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "array": {
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "valType": "number",
                            "role": "style"
                        }
                    },
                    "arraysrc": {
                        "description": "Sets the source reference on plot.ly for  array .",
                        "valType": "string",
                        "role": "info"
                    },
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "role": "object",
                    "arrayminus": {
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "traceref": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "type": {
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ]
                    },
                    "visible": {
                        "description": "Determines whether or not this set of error bars is visible.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "width": {
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the stoke color of the error bars.",
                        "valType": "color",
                        "role": "style"
                    },
                    "valueminus": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "symmetric": {
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "tracerefminus": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "arrayminussrc": {
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                },
                "orientation": {
                    "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
                    "values": [
                        "v",
                        "h"
                    ],
                    "role": "info",
                    "valType": "enumerated"
                },
                "yaxis": {
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "y"
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "error_y": {
                    "thickness": {
                        "description": "Sets the thickness (in px) of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "value": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "array": {
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "valType": "number",
                            "role": "style"
                        }
                    },
                    "arraysrc": {
                        "description": "Sets the source reference on plot.ly for  array .",
                        "valType": "string",
                        "role": "info"
                    },
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "role": "object",
                    "arrayminus": {
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "traceref": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "type": {
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ]
                    },
                    "visible": {
                        "description": "Determines whether or not this set of error bars is visible.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "width": {
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the stoke color of the error bars.",
                        "valType": "color",
                        "role": "style"
                    },
                    "valueminus": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "symmetric": {
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "tracerefminus": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "arrayminussrc": {
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "x": {
                    "description": "Sets the sample data to be binned on the x axis.",
                    "valType": "data_array",
                    "role": "data"
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "histnorm": {
                    "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent*, the span of each bar corresponds to the percentage of occurrences with respect to the total number of sample points (here, the sum of all bin area equals 100%). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin area equals the total number of sample points). If *probability density*, the span of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin area equals 1).",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "",
                        "percent",
                        "probability",
                        "density",
                        "probability density"
                    ],
                    "dflt": ""
                },
                "marker": {
                    "reversescale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the colorscale.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": false
                    },
                    "autocolorscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not the colorscale is picked using values inside `marker.color`.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "cmin": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "role": "object",
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    },
                    "colorbar": {
                        "tickangle": {
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "valType": "angle",
                            "role": "style",
                            "dflt": "auto"
                        },
                        "thickness": {
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 30
                        },
                        "titlefont": {
                            "description": "Sets this color bar's title font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "ypad": {
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "tickwidth": {
                            "description": "Sets the tick width (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "titleside": {
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "top"
                        },
                        "tickfont": {
                            "description": "Sets the tick font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "bgcolor": {
                            "description": "Sets the color of padded area.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "rgba(0,0,0,0)"
                        },
                        "len": {
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "lenmode": {
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "fraction"
                        },
                        "yanchor": {
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "middle"
                        },
                        "ticktextsrc": {
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "valType": "string",
                            "role": "info"
                        },
                        "ticktext": {
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "xpad": {
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "thicknessmode": {
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "pixels"
                        },
                        "exponentformat": {
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "dflt": "B"
                        },
                        "tickvalssrc": {
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "valType": "string",
                            "role": "info"
                        },
                        "outlinewidth": {
                            "description": "Sets the width (in px) of the axis line.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "tickmode": {
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ]
                        },
                        "showticksuffix": {
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "y": {
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 0.5
                        },
                        "showexponent": {
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "borderwidth": {
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "x": {
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 1.02
                        },
                        "title": {
                            "description": "Sets the title of the color bar.",
                            "valType": "string",
                            "role": "info",
                            "dflt": "Click to enter colorscale title"
                        },
                        "tickvals": {
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "tick0": {
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "showtickprefix": {
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "ticks": {
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "dflt": ""
                        },
                        "tickcolor": {
                            "description": "Sets the tick color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "bordercolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "outlinecolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "dtick": {
                            "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                            "valType": "any",
                            "role": "style",
                            "dflt": 1
                        },
                        "nticks": {
                            "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                            "min": 0,
                            "valType": "integer",
                            "role": "style",
                            "dflt": 0
                        },
                        "showticklabels": {
                            "description": "Determines whether or not the tick labels are drawn.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "tickformat": {
                            "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "role": "object",
                        "xanchor": {
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "left"
                        },
                        "tickprefix": {
                            "description": "Sets a tick label prefix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticksuffix": {
                            "description": "Sets a tick label suffix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticklen": {
                            "description": "Sets the tick length (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 5
                        }
                    },
                    "cauto": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines the whether or not the color domain is computed automatically.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "line": {
                        "reversescale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the colorscale.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": false
                        },
                        "autocolorscale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether or not the colorscale is picked using the sign of values inside `marker.line.color`.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "role": "object",
                        "width": {
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "min": 0,
                            "role": "style",
                            "valType": "number",
                            "dflt": 0,
                            "arrayOk": true
                        },
                        "colorscale": {
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`.",
                            "valType": "colorscale",
                            "role": "style"
                        },
                        "widthsrc": {
                            "description": "Sets the source reference on plot.ly for  width .",
                            "valType": "string",
                            "role": "info"
                        },
                        "color": {
                            "description": "Sets the marker outline color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "valType": "color",
                            "role": "style",
                            "arrayOk": true
                        },
                        "cmax": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "cauto": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines the whether or not the color domain is computed with respect to the input data.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "cmin": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "colorsrc": {
                            "description": "Sets the source reference on plot.ly for  color .",
                            "valType": "string",
                            "role": "info"
                        }
                    },
                    "colorscale": {
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`.",
                        "valType": "colorscale",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the marker color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "cmax": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "showscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    }
                }
            }
        },
        "scatter3d": {
            "description": "The data visualized as scatter point or lines in 3D dimension is set in `x`, `y`, `z`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` Projections are achieved via `projection`. Surface fills are achieved via `surfaceaxis`.",
            "hrName": "scatter_3d",
            "attributes": {
                "projection": {
                    "y": {
                        "role": "object",
                        "opacity": {
                            "description": "Sets the projection color.",
                            "min": 0,
                            "role": "style",
                            "max": 1,
                            "valType": "number",
                            "dflt": 1
                        },
                        "scale": {
                            "description": "Sets the scale factor determining the size of the projection marker points.",
                            "min": 0,
                            "role": "style",
                            "max": 10,
                            "valType": "number",
                            "dflt": 0.6666666666666666
                        },
                        "show": {
                            "description": "Sets whether or not projections are shown along the y axis.",
                            "valType": "boolean",
                            "role": "info",
                            "dflt": false
                        }
                    },
                    "x": {
                        "role": "object",
                        "opacity": {
                            "description": "Sets the projection color.",
                            "min": 0,
                            "role": "style",
                            "max": 1,
                            "valType": "number",
                            "dflt": 1
                        },
                        "scale": {
                            "description": "Sets the scale factor determining the size of the projection marker points.",
                            "min": 0,
                            "role": "style",
                            "max": 10,
                            "valType": "number",
                            "dflt": 0.6666666666666666
                        },
                        "show": {
                            "description": "Sets whether or not projections are shown along the x axis.",
                            "valType": "boolean",
                            "role": "info",
                            "dflt": false
                        }
                    },
                    "role": "object",
                    "z": {
                        "role": "object",
                        "opacity": {
                            "description": "Sets the projection color.",
                            "min": 0,
                            "role": "style",
                            "max": 1,
                            "valType": "number",
                            "dflt": 1
                        },
                        "scale": {
                            "description": "Sets the scale factor determining the size of the projection marker points.",
                            "min": 0,
                            "role": "style",
                            "max": 10,
                            "valType": "number",
                            "dflt": 0.6666666666666666
                        },
                        "show": {
                            "description": "Sets whether or not projections are shown along the z axis.",
                            "valType": "boolean",
                            "role": "info",
                            "dflt": false
                        }
                    }
                },
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "z": {
                    "description": "Sets the z coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "textpositionsrc": {
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "valType": "string",
                    "role": "info"
                },
                "surfaceaxis": {
                    "description": "If *-1*, the scatter points are not fill with a surface If *0*, *1*, *2*, the scatter points are filled with a Delaunay surface about the x, y, z respectively.",
                    "values": [
                        -1,
                        0,
                        1,
                        2
                    ],
                    "role": "info",
                    "valType": "enumerated",
                    "dflt": -1
                },
                "connectgaps": {
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "text": {
                    "dflt": "",
                    "description": "Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates.",
                    "valType": "string",
                    "role": "info",
                    "arrayOk": true
                },
                "error_y": {
                    "thickness": {
                        "description": "Sets the thickness (in px) of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "value": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "array": {
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "valType": "number",
                            "role": "style"
                        }
                    },
                    "arraysrc": {
                        "description": "Sets the source reference on plot.ly for  array .",
                        "valType": "string",
                        "role": "info"
                    },
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "role": "object",
                    "arrayminus": {
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "traceref": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "type": {
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ]
                    },
                    "visible": {
                        "description": "Determines whether or not this set of error bars is visible.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "width": {
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the stoke color of the error bars.",
                        "valType": "color",
                        "role": "style"
                    },
                    "valueminus": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "symmetric": {
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "tracerefminus": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "arrayminussrc": {
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "zsrc": {
                    "description": "Sets the source reference on plot.ly for  z .",
                    "valType": "string",
                    "role": "info"
                },
                "mode": {
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.",
                    "role": "info",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "lines+markers"
                },
                "y": {
                    "description": "Sets the y coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "error_z": {
                    "thickness": {
                        "description": "Sets the thickness (in px) of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "value": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "array": {
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "valType": "number",
                            "role": "style"
                        }
                    },
                    "arraysrc": {
                        "description": "Sets the source reference on plot.ly for  array .",
                        "valType": "string",
                        "role": "info"
                    },
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "role": "object",
                    "arrayminus": {
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "traceref": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "type": {
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ]
                    },
                    "visible": {
                        "description": "Determines whether or not this set of error bars is visible.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "width": {
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the stoke color of the error bars.",
                        "valType": "color",
                        "role": "style"
                    },
                    "valueminus": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "symmetric": {
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "tracerefminus": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "arrayminussrc": {
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "surfacecolor": {
                    "description": "Sets the surface fill color.",
                    "valType": "color",
                    "role": "style"
                },
                "scene": {
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "scene"
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                },
                "error_x": {
                    "thickness": {
                        "description": "Sets the thickness (in px) of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "value": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "array": {
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "valType": "number",
                            "role": "style"
                        }
                    },
                    "arraysrc": {
                        "description": "Sets the source reference on plot.ly for  array .",
                        "valType": "string",
                        "role": "info"
                    },
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "role": "object",
                    "arrayminus": {
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "traceref": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "type": {
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ]
                    },
                    "visible": {
                        "description": "Determines whether or not this set of error bars is visible.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "width": {
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the stoke color of the error bars.",
                        "valType": "color",
                        "role": "style"
                    },
                    "valueminus": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "symmetric": {
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "tracerefminus": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "arrayminussrc": {
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "textposition": {
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "dflt": "top center",
                    "valType": "enumerated",
                    "role": "style",
                    "arrayOk": true
                },
                "x": {
                    "description": "Sets the x coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "textfont": {
                    "description": "Sets the text font.",
                    "family": {
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true,
                        "arrayOk": true
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style",
                        "arrayOk": true
                    },
                    "sizesrc": {
                        "description": "Sets the source reference on plot.ly for  size .",
                        "valType": "string",
                        "role": "info"
                    },
                    "familysrc": {
                        "description": "Sets the source reference on plot.ly for  family .",
                        "valType": "string",
                        "role": "info"
                    },
                    "color": {
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "role": "object",
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "line": {
                    "color": {
                        "description": "Sets the line color.",
                        "valType": "color",
                        "role": "style"
                    },
                    "role": "object",
                    "width": {
                        "description": "Sets the line width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "dash": {
                        "description": "Sets the style of the lines. Set to a dash string type or a dash length in px.",
                        "valType": "string",
                        "role": "style",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid"
                    }
                },
                "marker": {
                    "reversescale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the colorscale.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": false
                    },
                    "symbolsrc": {
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "valType": "string",
                        "role": "info"
                    },
                    "size": {
                        "description": "Sets the marker size (in px).",
                        "min": 0,
                        "role": "style",
                        "valType": "number",
                        "dflt": 8,
                        "arrayOk": true
                    },
                    "role": "object",
                    "opacity": {
                        "description": "Sets the marker opacity. Note that the marker opacity for scatter3d traces must be a scalar value for performance reasons. To set a blending opacity value (i.e. which is not transparent), set *marker.color* to an rgba color and use its alpha channel.",
                        "min": 0,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "arrayOk": false
                    },
                    "sizemin": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "sizemode": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "dflt": "diameter"
                    },
                    "autocolorscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not the colorscale is picked using values inside `marker.color`.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "cmin": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "symbol": {
                        "description": "Sets the marker symbol type.",
                        "values": [
                            "circle",
                            "circle-open",
                            "square",
                            "square-open",
                            "diamond",
                            "diamond-open",
                            "cross",
                            "x"
                        ],
                        "dflt": "circle",
                        "valType": "enumerated",
                        "role": "style",
                        "arrayOk": true
                    },
                    "colorbar": {
                        "tickangle": {
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "valType": "angle",
                            "role": "style",
                            "dflt": "auto"
                        },
                        "thickness": {
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 30
                        },
                        "titlefont": {
                            "description": "Sets this color bar's title font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "ypad": {
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "tickwidth": {
                            "description": "Sets the tick width (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "titleside": {
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "top"
                        },
                        "tickfont": {
                            "description": "Sets the tick font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "bgcolor": {
                            "description": "Sets the color of padded area.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "rgba(0,0,0,0)"
                        },
                        "len": {
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "lenmode": {
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "fraction"
                        },
                        "yanchor": {
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "middle"
                        },
                        "ticktextsrc": {
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "valType": "string",
                            "role": "info"
                        },
                        "ticktext": {
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "xpad": {
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "thicknessmode": {
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "pixels"
                        },
                        "exponentformat": {
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "dflt": "B"
                        },
                        "tickvalssrc": {
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "valType": "string",
                            "role": "info"
                        },
                        "outlinewidth": {
                            "description": "Sets the width (in px) of the axis line.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "tickmode": {
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ]
                        },
                        "showticksuffix": {
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "y": {
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 0.5
                        },
                        "showexponent": {
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "borderwidth": {
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "x": {
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 1.02
                        },
                        "title": {
                            "description": "Sets the title of the color bar.",
                            "valType": "string",
                            "role": "info",
                            "dflt": "Click to enter colorscale title"
                        },
                        "tickvals": {
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "tick0": {
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "showtickprefix": {
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "ticks": {
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "dflt": ""
                        },
                        "tickcolor": {
                            "description": "Sets the tick color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "bordercolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "outlinecolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "dtick": {
                            "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                            "valType": "any",
                            "role": "style",
                            "dflt": 1
                        },
                        "nticks": {
                            "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                            "min": 0,
                            "valType": "integer",
                            "role": "style",
                            "dflt": 0
                        },
                        "showticklabels": {
                            "description": "Determines whether or not the tick labels are drawn.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "tickformat": {
                            "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "role": "object",
                        "xanchor": {
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "left"
                        },
                        "tickprefix": {
                            "description": "Sets a tick label prefix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticksuffix": {
                            "description": "Sets a tick label suffix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticklen": {
                            "description": "Sets the tick length (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 5
                        }
                    },
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    },
                    "cmax": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "cauto": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines the whether or not the color domain is computed automatically.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "sizesrc": {
                        "description": "Sets the source reference on plot.ly for  size .",
                        "valType": "string",
                        "role": "info"
                    },
                    "colorscale": {
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`.",
                        "valType": "colorscale",
                        "role": "style"
                    },
                    "line": {
                        "reversescale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the colorscale.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": false
                        },
                        "autocolorscale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether or not the colorscale is picked using the sign of values inside `marker.line.color`.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "role": "object",
                        "width": {
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "arrayOk": false
                        },
                        "colorscale": {
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`.",
                            "valType": "colorscale",
                            "role": "style"
                        },
                        "color": {
                            "description": "Sets the marker outline color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "valType": "color",
                            "role": "style",
                            "arrayOk": true
                        },
                        "cmax": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "cauto": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines the whether or not the color domain is computed with respect to the input data.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "cmin": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "colorsrc": {
                            "description": "Sets the source reference on plot.ly for  color .",
                            "valType": "string",
                            "role": "info"
                        }
                    },
                    "color": {
                        "description": "Sets the marker color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "sizeref": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "showscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    }
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "type": "scatter3d"
            }
        },
        "mesh3d": {
            "description": "Draws sets of triangles with coordinates given by three 1-dimensional arrays in `x`, `y`, `z` and (1) a sets of `i`, `j`, `k` indices (2) Delaunay triangulation or (3) the Alpha-shape algorithm or (4) the Convex-hull algorithm",
            "attributes": {
                "ksrc": {
                    "description": "Sets the source reference on plot.ly for  k .",
                    "valType": "string",
                    "role": "info"
                },
                "alphahull": {
                    "description": "Sets the shape of the mesh If *-1*, Delaunay triangulation is used If *>0*, the alpha-shape algorithm is used If *0*,  the convex-hull algorithm is used An alternative to the `i`, `j`, `k` indices triplets.",
                    "valType": "number",
                    "role": "style",
                    "dflt": -1
                },
                "k": {
                    "description": "Sets the indices of z coordinates of the vertices",
                    "valType": "data_array",
                    "role": "data"
                },
                "scene": {
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "scene"
                },
                "opacity": {
                    "dflt": 1,
                    "max": 1,
                    "valType": "number",
                    "role": "style",
                    "min": 0
                },
                "z": {
                    "description": "Sets the z coordinates of the vertices",
                    "valType": "data_array",
                    "role": "data"
                },
                "vertexcolor": {
                    "description": "Sets the color of each vertex Overrides *color*.",
                    "valType": "data_array",
                    "role": "data"
                },
                "facecolorsrc": {
                    "description": "Sets the source reference on plot.ly for  facecolor .",
                    "valType": "string",
                    "role": "info"
                },
                "colorbar": {
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "thickness": {
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 30
                    },
                    "titlefont": {
                        "description": "Sets this color bar's title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "ypad": {
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "titleside": {
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "bgcolor": {
                        "description": "Sets the color of padded area.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgba(0,0,0,0)"
                    },
                    "len": {
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "lenmode": {
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction"
                    },
                    "yanchor": {
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle"
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "xpad": {
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "thicknessmode": {
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels"
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "outlinewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "y": {
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 0.5
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "borderwidth": {
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "x": {
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 1.02
                    },
                    "title": {
                        "description": "Sets the title of the color bar.",
                        "valType": "string",
                        "role": "info",
                        "dflt": "Click to enter colorscale title"
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "dflt": ""
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "bordercolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "outlinecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "role": "object",
                    "xanchor": {
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left"
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    }
                },
                "lighting": {
                    "diffuse": {
                        "dflt": 0.8,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "min": 0
                    },
                    "fresnel": {
                        "dflt": 0.2,
                        "max": 5,
                        "valType": "number",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object",
                    "ambient": {
                        "dflt": 0.8,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "min": 0
                    },
                    "roughness": {
                        "dflt": 0.5,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "min": 0
                    },
                    "specular": {
                        "dflt": 0.05,
                        "max": 2,
                        "valType": "number",
                        "role": "style",
                        "min": 0
                    }
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "reversescale": {
                    "description": "Reverses the colorscale.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "colorscale": {
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "valType": "colorscale",
                    "role": "style"
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "facecolor": {
                    "description": "Sets the color of each face Overrides *color* and *vertexcolor*.",
                    "valType": "data_array",
                    "role": "data"
                },
                "flatshading": {
                    "description": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with a low-poly look.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "vertexcolorsrc": {
                    "description": "Sets the source reference on plot.ly for  vertexcolor .",
                    "valType": "string",
                    "role": "info"
                },
                "zsrc": {
                    "description": "Sets the source reference on plot.ly for  z .",
                    "valType": "string",
                    "role": "info"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "showscale": {
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "type": "mesh3d",
                "jsrc": {
                    "description": "Sets the source reference on plot.ly for  j .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "intensitysrc": {
                    "description": "Sets the source reference on plot.ly for  intensity .",
                    "valType": "string",
                    "role": "info"
                },
                "j": {
                    "description": "Sets the indices of y coordinates of the vertices",
                    "valType": "data_array",
                    "role": "data"
                },
                "i": {
                    "description": "Sets the indices of x coordinates of the vertices",
                    "valType": "data_array",
                    "role": "data"
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                },
                "isrc": {
                    "description": "Sets the source reference on plot.ly for  i .",
                    "valType": "string",
                    "role": "info"
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "x": {
                    "description": "Sets the x coordinates of the vertices",
                    "valType": "data_array",
                    "role": "data"
                },
                "contour": {
                    "color": {
                        "dflt": "#000",
                        "valType": "color",
                        "role": "style"
                    },
                    "role": "object",
                    "width": {
                        "dflt": 2,
                        "max": 16,
                        "valType": "number",
                        "role": "style",
                        "min": 1
                    },
                    "show": {
                        "description": "Sets whether or not dynamic contours are shown on hover",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    }
                },
                "color": {
                    "description": "Sets the color of the whole mesh",
                    "valType": "color",
                    "role": "style"
                },
                "intensity": {
                    "description": "Sets the vertex intensity values, used for plotting fields on meshes",
                    "valType": "data_array",
                    "role": "data"
                },
                "y": {
                    "description": "Sets the y coordinates of the vertices",
                    "valType": "data_array",
                    "role": "data"
                },
                "delaunayaxis": {
                    "description": "Sets the Delaunay axis from which the triangulation of the mesh takes place. An alternative to setting the `i`, `j`, `k` indices triplets.",
                    "values": [
                        "x",
                        "y",
                        "z"
                    ],
                    "role": "info",
                    "valType": "enumerated",
                    "dflt": "z"
                }
            }
        },
        "heatmap": {
            "description": "The data that describes the heatmap value-to-color mapping is set in `z`. Data in `z` can either be a {2D array} of values (ragged or not) or a 1D array of values. In the case where `z` is a {2D array}, say that `z` has N rows and M columns. Then, by default, the resulting heatmap will have N partitions along the y axis and M partitions along the x axis. In other words, the i-th row/ j-th column cell in `z` is mapped to the i-th partition of the y axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). This behavior can be flipped by using `transpose`. Moreover, `x` (`y`) can be provided with M or M+1 (N or N+1) elements. If M (N), then the coordinates correspond to the center of the heatmap cells and the cells have equal width. If M+1 (N+1), then the coordinates correspond to the edges of the heatmap cells. In the case where `z` is a 1D {array}, the x and y coordinates must be provided in `x` and `y` respectively to form data triplets.",
            "attributes": {
                "reversescale": {
                    "description": "Reverses the colorscale.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "autocolorscale": {
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "z": {
                    "description": "Sets the z data.",
                    "valType": "data_array",
                    "role": "data"
                },
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "xaxis": {
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "x"
                },
                "dy": {
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "connectgaps": {
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "zmin": {
                    "description": "Sets the lower bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "xtype": {
                    "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "array",
                        "scaled"
                    ]
                },
                "dx": {
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "text": {
                    "description": "Sets the text elements associated with each z value.",
                    "valType": "data_array",
                    "role": "data"
                },
                "x": {
                    "description": "Sets the x coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "colorbar": {
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "thickness": {
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 30
                    },
                    "titlefont": {
                        "description": "Sets this color bar's title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "ypad": {
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "titleside": {
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "bgcolor": {
                        "description": "Sets the color of padded area.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgba(0,0,0,0)"
                    },
                    "len": {
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "lenmode": {
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction"
                    },
                    "yanchor": {
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle"
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "xpad": {
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "thicknessmode": {
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels"
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "outlinewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "y": {
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 0.5
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "borderwidth": {
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "x": {
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 1.02
                    },
                    "title": {
                        "description": "Sets the title of the color bar.",
                        "valType": "string",
                        "role": "info",
                        "dflt": "Click to enter colorscale title"
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "dflt": ""
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "bordercolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "outlinecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "role": "object",
                    "xanchor": {
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left"
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    }
                },
                "colorscale": {
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "valType": "colorscale",
                    "role": "style"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "zsrc": {
                    "description": "Sets the source reference on plot.ly for  z .",
                    "valType": "string",
                    "role": "info"
                },
                "ytype": {
                    "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "array",
                        "scaled"
                    ]
                },
                "showscale": {
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "type": "heatmap",
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "transpose": {
                    "description": "Transposes the z data.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "y0": {
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "valType": "any",
                    "role": "info",
                    "dflt": 0
                },
                "yaxis": {
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "y"
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "x0": {
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "valType": "any",
                    "role": "info",
                    "dflt": 0
                },
                "zmax": {
                    "description": "Sets the upper bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "zauto": {
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "y": {
                    "description": "Sets the y coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "zsmooth": {
                    "description": "Picks a smoothing algorithm use to smooth `z` data.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "fast",
                        "best",
                        false
                    ],
                    "dflt": false
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                }
            }
        },
        "histogram2dcontour": {
            "description": "The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a contour plot.",
            "hrName": "histogram_2d_contour",
            "attributes": {
                "reversescale": {
                    "description": "Reverses the colorscale.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "autocolorscale": {
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "xaxis": {
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "x"
                },
                "z": {
                    "description": "Sets the aggregation data.",
                    "valType": "data_array",
                    "role": "data"
                },
                "zmin": {
                    "description": "Sets the lower bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "ybins": {
                    "end": {
                        "description": "Sets the end value for the y axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "role": "object",
                    "start": {
                        "description": "Sets the starting value for the y axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "size": {
                        "description": "Sets the step in-between value each y axis bin.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    }
                },
                "colorbar": {
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "thickness": {
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 30
                    },
                    "titlefont": {
                        "description": "Sets this color bar's title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "ypad": {
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "titleside": {
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "bgcolor": {
                        "description": "Sets the color of padded area.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgba(0,0,0,0)"
                    },
                    "len": {
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "lenmode": {
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction"
                    },
                    "yanchor": {
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle"
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "xpad": {
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "thicknessmode": {
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels"
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "outlinewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "y": {
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 0.5
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "borderwidth": {
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "x": {
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 1.02
                    },
                    "title": {
                        "description": "Sets the title of the color bar.",
                        "valType": "string",
                        "role": "info",
                        "dflt": "Click to enter colorscale title"
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "dflt": ""
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "bordercolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "outlinecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "role": "object",
                    "xanchor": {
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left"
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    }
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "nbinsx": {
                    "description": "Sets the number of x axis bins.",
                    "min": 0,
                    "valType": "integer",
                    "role": "style",
                    "dflt": 0
                },
                "colorscale": {
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "valType": "colorscale",
                    "role": "style"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "autobinx": {
                    "description": "Determines whether or not the x axis bin attributes are picked by an algorithm.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "autobiny": {
                    "description": "Determines whether or not the y axis bin attributes are picked by an algorithm.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "contours": {
                    "end": {
                        "description": "Sets the end contour level value.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "role": "object",
                    "start": {
                        "description": "Sets the starting contour level value.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "showlines": {
                        "description": "Determines whether or not the contour lines are drawn. Has only an effect if `contours.coloring` is set to *fill*.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "coloring": {
                        "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient is coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "fill",
                            "heatmap",
                            "lines",
                            "none"
                        ],
                        "dflt": "fill"
                    },
                    "size": {
                        "description": "Sets the step between each contour level.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    }
                },
                "zsrc": {
                    "description": "Sets the source reference on plot.ly for  z .",
                    "valType": "string",
                    "role": "info"
                },
                "showscale": {
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "type": "histogram2dcontour",
                "nbinsy": {
                    "description": "Sets the number of y axis bins.",
                    "min": 0,
                    "valType": "integer",
                    "role": "style",
                    "dflt": 0
                },
                "autocontour": {
                    "description": "Determines whether of not the contour level attributes at picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "xbins": {
                    "end": {
                        "description": "Sets the end value for the x axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "role": "object",
                    "start": {
                        "description": "Sets the starting value for the x axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "size": {
                        "description": "Sets the step in-between value each x axis bin.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    }
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "ncontours": {
                    "description": "Sets the number of contour levels.",
                    "valType": "integer",
                    "role": "style",
                    "dflt": 0
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                },
                "yaxis": {
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "y"
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "histfunc": {
                    "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "count",
                        "sum",
                        "avg",
                        "min",
                        "max"
                    ],
                    "dflt": "count"
                },
                "line": {
                    "color": {
                        "description": "Sets the color of the contour level. Has no if `contours.coloring` is set to *lines*.",
                        "valType": "color",
                        "role": "style"
                    },
                    "role": "object",
                    "width": {
                        "description": "Sets the line width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "smoothing": {
                        "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
                        "min": 0,
                        "role": "style",
                        "max": 1.3,
                        "valType": "number",
                        "dflt": 1
                    },
                    "dash": {
                        "description": "Sets the style of the lines. Set to a dash string type or a dash length in px.",
                        "valType": "string",
                        "role": "style",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid"
                    }
                },
                "x": {
                    "description": "Sets the sample data to be binned on the x axis.",
                    "valType": "data_array",
                    "role": "data"
                },
                "zmax": {
                    "description": "Sets the upper bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "zauto": {
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "histnorm": {
                    "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent*, the span of each bar corresponds to the percentage of occurrences with respect to the total number of sample points (here, the sum of all bin area equals 100%). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin area equals the total number of sample points). If *probability density*, the span of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin area equals 1).",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "",
                        "percent",
                        "probability",
                        "density",
                        "probability density"
                    ],
                    "dflt": ""
                },
                "y": {
                    "description": "Sets the sample data to be binned on the y axis.",
                    "valType": "data_array",
                    "role": "data"
                },
                "marker": {
                    "color": {
                        "description": "Sets the aggregation data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "role": "object",
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    }
                }
            }
        },
        "box": {
            "description": "In vertical (horizontal) box plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one box per distinct x (y) value is drawn If no `x` (`y`) {array} is provided, a single box is drawn. That box position is then positioned with with `name` or with `x0` (`y0`) if provided. Each box spans from quartile 1 (Q1) to quartile 3 (Q3). The second quartile (Q2) is marked by a line inside the box. By default, the whiskers correspond to the box' edges +/- 1.5 times the interquartile range (IQR = Q3-Q1), see *boxpoints* for other options.",
            "layoutAttributes": {
                "boxgap": {
                    "description": "Sets the gap (in plot fraction) between boxes of adjacent location coordinates.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 0.3
                },
                "boxgroupgap": {
                    "description": "Sets the gap (in plot fraction) between boxes of the same location coordinate.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 0.3
                },
                "boxmode": {
                    "description": "Determines how boxes at the same location coordinate are displayed on the graph. If *group*, the boxes are plotted next to one another centered around the shared location. If *overlay*, the boxes are plotted over one another, you might need to set *opacity* to see them multiple boxes.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "group",
                        "overlay"
                    ],
                    "dflt": "overlay"
                }
            },
            "attributes": {
                "y0": {
                    "description": "Sets the y coordinate of the box. See overview for more info.",
                    "valType": "any",
                    "role": "info"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "xaxis": {
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "x"
                },
                "boxmean": {
                    "description": "If *true*, the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If *sd* the standard deviation is also drawn.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        true,
                        "sd",
                        false
                    ],
                    "dflt": false
                },
                "boxpoints": {
                    "description": "If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the box(es) are shown with no sample points",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "all",
                        "outliers",
                        "suspectedoutliers",
                        false
                    ],
                    "dflt": "outliers"
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "jitter": {
                    "description": "Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the box(es).",
                    "max": 1,
                    "valType": "number",
                    "role": "style",
                    "min": 0
                },
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "x": {
                    "description": "Sets the x sample data or coordinates. See overview for more info.",
                    "valType": "data_array",
                    "role": "data"
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "fillcolor": {
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "valType": "color",
                    "role": "style"
                },
                "y": {
                    "description": "Sets the y sample data or coordinates. See overview for more info.",
                    "valType": "data_array",
                    "role": "data"
                },
                "type": "box",
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "pointpos": {
                    "description": "Sets the position of the sample points in relation to the box(es). If *0*, the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes",
                    "max": 2,
                    "valType": "number",
                    "role": "style",
                    "min": -2
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                },
                "orientation": {
                    "description": "Sets the orientation of the box(es). If *v* (*h*), the distribution is visualized along the vertical (horizontal).",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "v",
                        "h"
                    ]
                },
                "yaxis": {
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "y"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "line": {
                    "color": {
                        "description": "Sets the color of line bounding the box(es).",
                        "valType": "color",
                        "role": "style"
                    },
                    "role": "object",
                    "width": {
                        "description": "Sets the width (in px) of line bounding the box(es).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    }
                },
                "x0": {
                    "description": "Sets the x coordinate of the box. See overview for more info.",
                    "valType": "any",
                    "role": "info"
                },
                "whiskerwidth": {
                    "description": "Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 0.5
                },
                "marker": {
                    "opacity": {
                        "description": "Sets the marker opacity.",
                        "min": 0,
                        "role": "style",
                        "max": 1,
                        "valType": "number",
                        "dflt": 1,
                        "arrayOk": false
                    },
                    "symbol": {
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "dflt": "circle",
                        "valType": "enumerated",
                        "role": "style",
                        "arrayOk": false
                    },
                    "line": {
                        "color": {
                            "dflt": "#444",
                            "description": "Sets the marker outline color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "valType": "color",
                            "role": "style",
                            "arrayOk": false
                        },
                        "role": "object",
                        "width": {
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "min": 0,
                            "role": "style",
                            "valType": "number",
                            "dflt": 0,
                            "arrayOk": false
                        },
                        "outliercolor": {
                            "description": "Sets the border line color of the outlier sample points. Defaults to marker.color",
                            "valType": "color",
                            "role": "style"
                        },
                        "outlierwidth": {
                            "description": "Sets the border line width (in px) of the outlier sample points.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        }
                    },
                    "color": {
                        "description": "Sets the marker color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "valType": "color",
                        "role": "style",
                        "arrayOk": false
                    },
                    "role": "object",
                    "outliercolor": {
                        "description": "Sets the color of the outlier sample points.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgba(0, 0, 0, 0)"
                    },
                    "size": {
                        "description": "Sets the marker size (in px).",
                        "min": 0,
                        "role": "style",
                        "valType": "number",
                        "dflt": 6,
                        "arrayOk": false
                    }
                }
            }
        },
        "surface": {
            "description": "The data the describes the coordinates of the surface is set in `z`. Data in `z` should be a {2D array}. Coordinates in `x` and `y` can either be 1D {arrays} or {2D arrays} (e.g. to graph parametric surfaces). If not provided in `x` and `y`, the x and y coordinates are assumed to be linear starting at 0 with a unit step. The color scale corresponds to the `z` values by default. For custom color scales, use `surfacecolor` which should be a {2D array}, where its bounds can be controlled using `cmin` and `cmax`.",
            "attributes": {
                "reversescale": {
                    "description": "Reverses the colorscale.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "autocolorscale": {
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "dflt": 1,
                    "max": 1,
                    "valType": "number",
                    "role": "style",
                    "min": 0
                },
                "_deprecated": {
                    "zauto": {
                        "description": "Obsolete. Use `cauto` instead.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": true
                    },
                    "zmin": {
                        "description": "Obsolete. Use `cmin` instead.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "zmax": {
                        "description": "Obsolete. Use `cmax` instead.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    }
                },
                "z": {
                    "description": "Sets the z coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "colorbar": {
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "thickness": {
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 30
                    },
                    "titlefont": {
                        "description": "Sets this color bar's title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "ypad": {
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "titleside": {
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "bgcolor": {
                        "description": "Sets the color of padded area.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgba(0,0,0,0)"
                    },
                    "len": {
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "lenmode": {
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction"
                    },
                    "yanchor": {
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle"
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "xpad": {
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "thicknessmode": {
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels"
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "outlinewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "y": {
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 0.5
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "borderwidth": {
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "x": {
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 1.02
                    },
                    "title": {
                        "description": "Sets the title of the color bar.",
                        "valType": "string",
                        "role": "info",
                        "dflt": "Click to enter colorscale title"
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "dflt": ""
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "bordercolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "outlinecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "role": "object",
                    "xanchor": {
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left"
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    }
                },
                "lighting": {
                    "diffuse": {
                        "dflt": 0.8,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "min": 0
                    },
                    "fresnel": {
                        "dflt": 0.2,
                        "max": 5,
                        "valType": "number",
                        "role": "style",
                        "min": 0
                    },
                    "role": "object",
                    "ambient": {
                        "dflt": 0.8,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "min": 0
                    },
                    "roughness": {
                        "dflt": 0.5,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "min": 0
                    },
                    "specular": {
                        "dflt": 0.05,
                        "max": 2,
                        "valType": "number",
                        "role": "style",
                        "min": 0
                    }
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "text": {
                    "description": "Sets the text elements associated with each z value.",
                    "valType": "data_array",
                    "role": "data"
                },
                "hidesurface": {
                    "dflt": false,
                    "valType": "boolean",
                    "role": "info"
                },
                "colorscale": {
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "valType": "colorscale",
                    "role": "style"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "cauto": {
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "contours": {
                    "y": {
                        "highlight": {
                            "dflt": false,
                            "valType": "boolean",
                            "role": "info"
                        },
                        "project": {
                            "y": {
                                "description": "Sets whether or not the dynamic contours are projected along the y axis.",
                                "valType": "boolean",
                                "role": "info",
                                "dflt": false
                            },
                            "x": {
                                "description": "Sets whether or not the dynamic contours are projected along the x axis.",
                                "valType": "boolean",
                                "role": "info",
                                "dflt": false
                            },
                            "role": "object",
                            "z": {
                                "description": "Sets whether or not the dynamic contours are projected along the z axis.",
                                "valType": "boolean",
                                "role": "info",
                                "dflt": false
                            }
                        },
                        "usecolormap": {
                            "dflt": false,
                            "valType": "boolean",
                            "role": "info"
                        },
                        "highlightWidth": {
                            "dflt": 2,
                            "max": 16,
                            "valType": "number",
                            "role": "style",
                            "min": 1
                        },
                        "show": {
                            "description": "Sets whether or not dynamic contours are shown along the y axis",
                            "valType": "boolean",
                            "role": "info",
                            "dflt": false
                        },
                        "color": {
                            "dflt": "#000",
                            "valType": "color",
                            "role": "style"
                        },
                        "role": "object",
                        "highlightColor": {
                            "dflt": "#000",
                            "valType": "color",
                            "role": "style"
                        },
                        "width": {
                            "dflt": 2,
                            "max": 16,
                            "valType": "number",
                            "role": "style",
                            "min": 1
                        }
                    },
                    "x": {
                        "highlight": {
                            "dflt": false,
                            "valType": "boolean",
                            "role": "info"
                        },
                        "project": {
                            "y": {
                                "description": "Sets whether or not the dynamic contours are projected along the y axis.",
                                "valType": "boolean",
                                "role": "info",
                                "dflt": false
                            },
                            "x": {
                                "description": "Sets whether or not the dynamic contours are projected along the x axis.",
                                "valType": "boolean",
                                "role": "info",
                                "dflt": false
                            },
                            "role": "object",
                            "z": {
                                "description": "Sets whether or not the dynamic contours are projected along the z axis.",
                                "valType": "boolean",
                                "role": "info",
                                "dflt": false
                            }
                        },
                        "usecolormap": {
                            "dflt": false,
                            "valType": "boolean",
                            "role": "info"
                        },
                        "highlightWidth": {
                            "dflt": 2,
                            "max": 16,
                            "valType": "number",
                            "role": "style",
                            "min": 1
                        },
                        "show": {
                            "description": "Sets whether or not dynamic contours are shown along the x axis",
                            "valType": "boolean",
                            "role": "info",
                            "dflt": false
                        },
                        "color": {
                            "dflt": "#000",
                            "valType": "color",
                            "role": "style"
                        },
                        "role": "object",
                        "highlightColor": {
                            "dflt": "#000",
                            "valType": "color",
                            "role": "style"
                        },
                        "width": {
                            "dflt": 2,
                            "max": 16,
                            "valType": "number",
                            "role": "style",
                            "min": 1
                        }
                    },
                    "role": "object",
                    "z": {
                        "highlight": {
                            "dflt": false,
                            "valType": "boolean",
                            "role": "info"
                        },
                        "project": {
                            "y": {
                                "description": "Sets whether or not the dynamic contours are projected along the y axis.",
                                "valType": "boolean",
                                "role": "info",
                                "dflt": false
                            },
                            "x": {
                                "description": "Sets whether or not the dynamic contours are projected along the x axis.",
                                "valType": "boolean",
                                "role": "info",
                                "dflt": false
                            },
                            "role": "object",
                            "z": {
                                "description": "Sets whether or not the dynamic contours are projected along the z axis.",
                                "valType": "boolean",
                                "role": "info",
                                "dflt": false
                            }
                        },
                        "usecolormap": {
                            "dflt": false,
                            "valType": "boolean",
                            "role": "info"
                        },
                        "highlightWidth": {
                            "dflt": 2,
                            "max": 16,
                            "valType": "number",
                            "role": "style",
                            "min": 1
                        },
                        "show": {
                            "description": "Sets whether or not dynamic contours are shown along the z axis",
                            "valType": "boolean",
                            "role": "info",
                            "dflt": false
                        },
                        "color": {
                            "dflt": "#000",
                            "valType": "color",
                            "role": "style"
                        },
                        "role": "object",
                        "highlightColor": {
                            "dflt": "#000",
                            "valType": "color",
                            "role": "style"
                        },
                        "width": {
                            "dflt": 2,
                            "max": 16,
                            "valType": "number",
                            "role": "style",
                            "min": 1
                        }
                    }
                },
                "zsrc": {
                    "description": "Sets the source reference on plot.ly for  z .",
                    "valType": "string",
                    "role": "info"
                },
                "showscale": {
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "type": "surface",
                "cmax": {
                    "description": "Sets the upper bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "surfacecolor": {
                    "description": "Sets the surface color values, used for setting a color scale independent of `z`.",
                    "valType": "data_array",
                    "role": "data"
                },
                "scene": {
                    "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "scene"
                },
                "cmin": {
                    "description": "Sets the lower bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "x": {
                    "description": "Sets the x coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "surfacecolorsrc": {
                    "description": "Sets the source reference on plot.ly for  surfacecolor .",
                    "valType": "string",
                    "role": "info"
                },
                "y": {
                    "description": "Sets the y coordinates.",
                    "valType": "data_array",
                    "role": "data"
                }
            }
        },
        "choropleth": {
            "description": "The data that describes the choropleth value-to-color mapping is set in `z`. The geographic locations corresponding to each value in `z` are set in `locations`.",
            "attributes": {
                "reversescale": {
                    "description": "Reverses the colorscale.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "autocolorscale": {
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "location",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "colorscale": {
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "valType": "colorscale",
                    "role": "style"
                },
                "z": {
                    "description": "Sets the color values.",
                    "valType": "data_array",
                    "role": "data"
                },
                "zmin": {
                    "description": "Sets the lower bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "colorbar": {
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "thickness": {
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 30
                    },
                    "titlefont": {
                        "description": "Sets this color bar's title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "ypad": {
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "titleside": {
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "bgcolor": {
                        "description": "Sets the color of padded area.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgba(0,0,0,0)"
                    },
                    "len": {
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "lenmode": {
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction"
                    },
                    "yanchor": {
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle"
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "xpad": {
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "thicknessmode": {
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels"
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "outlinewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "y": {
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 0.5
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "borderwidth": {
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "x": {
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 1.02
                    },
                    "title": {
                        "description": "Sets the title of the color bar.",
                        "valType": "string",
                        "role": "info",
                        "dflt": "Click to enter colorscale title"
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "dflt": ""
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "bordercolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "outlinecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "role": "object",
                    "xanchor": {
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left"
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    }
                },
                "type": "choropleth",
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "text": {
                    "description": "Sets the text elements associated with each location.",
                    "valType": "data_array",
                    "role": "data"
                },
                "locationssrc": {
                    "description": "Sets the source reference on plot.ly for  locations .",
                    "valType": "string",
                    "role": "info"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "locations": {
                    "description": "Sets the coordinates via location IDs or names. See `locationmode` for more info.",
                    "valType": "data_array",
                    "role": "data"
                },
                "zsrc": {
                    "description": "Sets the source reference on plot.ly for  z .",
                    "valType": "string",
                    "role": "info"
                },
                "showscale": {
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "geo": {
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "geo"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "zmax": {
                    "description": "Sets the upper bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "zauto": {
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "marker": {
                    "role": "object",
                    "line": {
                        "color": {
                            "description": "Sets the marker outline color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "valType": "color",
                            "role": "style",
                            "arrayOk": true
                        },
                        "role": "object",
                        "colorsrc": {
                            "description": "Sets the source reference on plot.ly for  color .",
                            "valType": "string",
                            "role": "info"
                        },
                        "width": {
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "arrayOk": true
                        },
                        "widthsrc": {
                            "description": "Sets the source reference on plot.ly for  width .",
                            "valType": "string",
                            "role": "info"
                        }
                    }
                },
                "locationmode": {
                    "description": "Determines the set of locations used to match entries in `locations` to regions on the map.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "ISO-3",
                        "USA-states",
                        "country names"
                    ],
                    "dflt": "ISO-3"
                }
            }
        },
        "scatterternary": {
            "description": "Provides similar functionality to the *scatter* type but on a ternary phase diagram. The data is provided by at least two arrays out of `a`, `b`, `c` triplets.",
            "hrName": "scatter_ternary",
            "attributes": {
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "a",
                        "b",
                        "c",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "subplot": {
                    "description": "Sets a reference between this trace's data coordinates and a ternary subplot. If *ternary* (the default value), the data refer to `layout.ternary`. If *ternary2*, the data refer to `layout.ternary2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "ternary"
                },
                "connectgaps": {
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "type": "scatterternary",
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "text": {
                    "dflt": "",
                    "description": "Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c).",
                    "valType": "string",
                    "role": "info",
                    "arrayOk": true
                },
                "bsrc": {
                    "description": "Sets the source reference on plot.ly for  b .",
                    "valType": "string",
                    "role": "info"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "b": {
                    "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
                    "valType": "data_array",
                    "role": "data"
                },
                "fillcolor": {
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "valType": "color",
                    "role": "style"
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "textpositionsrc": {
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "valType": "string",
                    "role": "info"
                },
                "c": {
                    "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
                    "valType": "data_array",
                    "role": "data"
                },
                "sum": {
                    "description": "The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary<i>.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary<i>.sum",
                    "min": 0,
                    "valType": "number",
                    "role": "info",
                    "dflt": 0
                },
                "fill": {
                    "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "none",
                        "toself",
                        "tonext"
                    ],
                    "dflt": "none"
                },
                "textposition": {
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "dflt": "middle center",
                    "valType": "enumerated",
                    "role": "style",
                    "arrayOk": true
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "textfont": {
                    "description": "Sets the text font.",
                    "family": {
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true,
                        "arrayOk": true
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style",
                        "arrayOk": true
                    },
                    "sizesrc": {
                        "description": "Sets the source reference on plot.ly for  size .",
                        "valType": "string",
                        "role": "info"
                    },
                    "familysrc": {
                        "description": "Sets the source reference on plot.ly for  family .",
                        "valType": "string",
                        "role": "info"
                    },
                    "color": {
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "role": "object",
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "line": {
                    "width": {
                        "description": "Sets the line width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "shape": {
                        "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "linear",
                            "spline"
                        ],
                        "dflt": "linear"
                    },
                    "color": {
                        "description": "Sets the line color.",
                        "valType": "color",
                        "role": "style"
                    },
                    "smoothing": {
                        "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
                        "min": 0,
                        "role": "style",
                        "max": 1.3,
                        "valType": "number",
                        "dflt": 1
                    },
                    "role": "object",
                    "dash": {
                        "description": "Sets the style of the lines. Set to a dash string type or a dash length in px.",
                        "valType": "string",
                        "role": "style",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid"
                    }
                },
                "asrc": {
                    "description": "Sets the source reference on plot.ly for  a .",
                    "valType": "string",
                    "role": "info"
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "mode": {
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.",
                    "role": "info",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "markers"
                },
                "csrc": {
                    "description": "Sets the source reference on plot.ly for  c .",
                    "valType": "string",
                    "role": "info"
                },
                "marker": {
                    "reversescale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the colorscale.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": false
                    },
                    "autocolorscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not the colorscale is picked using values inside `marker.color`.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "opacitysrc": {
                        "description": "Sets the source reference on plot.ly for  opacity .",
                        "valType": "string",
                        "role": "info"
                    },
                    "sizemin": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "sizemode": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "dflt": "diameter"
                    },
                    "symbolsrc": {
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "valType": "string",
                        "role": "info"
                    },
                    "colorbar": {
                        "tickangle": {
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "valType": "angle",
                            "role": "style",
                            "dflt": "auto"
                        },
                        "thickness": {
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 30
                        },
                        "titlefont": {
                            "description": "Sets this color bar's title font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "ypad": {
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "tickwidth": {
                            "description": "Sets the tick width (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "titleside": {
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "top"
                        },
                        "tickfont": {
                            "description": "Sets the tick font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "bgcolor": {
                            "description": "Sets the color of padded area.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "rgba(0,0,0,0)"
                        },
                        "len": {
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "lenmode": {
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "fraction"
                        },
                        "yanchor": {
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "middle"
                        },
                        "ticktextsrc": {
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "valType": "string",
                            "role": "info"
                        },
                        "ticktext": {
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "xpad": {
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "thicknessmode": {
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "pixels"
                        },
                        "exponentformat": {
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "dflt": "B"
                        },
                        "tickvalssrc": {
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "valType": "string",
                            "role": "info"
                        },
                        "outlinewidth": {
                            "description": "Sets the width (in px) of the axis line.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "tickmode": {
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ]
                        },
                        "showticksuffix": {
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "y": {
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 0.5
                        },
                        "showexponent": {
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "borderwidth": {
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "x": {
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 1.02
                        },
                        "title": {
                            "description": "Sets the title of the color bar.",
                            "valType": "string",
                            "role": "info",
                            "dflt": "Click to enter colorscale title"
                        },
                        "tickvals": {
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "tick0": {
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "showtickprefix": {
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "ticks": {
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "dflt": ""
                        },
                        "tickcolor": {
                            "description": "Sets the tick color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "bordercolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "outlinecolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "dtick": {
                            "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                            "valType": "any",
                            "role": "style",
                            "dflt": 1
                        },
                        "nticks": {
                            "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                            "min": 0,
                            "valType": "integer",
                            "role": "style",
                            "dflt": 0
                        },
                        "showticklabels": {
                            "description": "Determines whether or not the tick labels are drawn.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "tickformat": {
                            "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "role": "object",
                        "xanchor": {
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "left"
                        },
                        "tickprefix": {
                            "description": "Sets a tick label prefix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticksuffix": {
                            "description": "Sets a tick label suffix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticklen": {
                            "description": "Sets the tick length (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 5
                        }
                    },
                    "cauto": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines the whether or not the color domain is computed automatically.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "colorscale": {
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`.",
                        "valType": "colorscale",
                        "role": "style"
                    },
                    "opacity": {
                        "description": "Sets the marker opacity.",
                        "min": 0,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "arrayOk": true
                    },
                    "size": {
                        "description": "Sets the marker size (in px).",
                        "min": 0,
                        "role": "style",
                        "valType": "number",
                        "dflt": 6,
                        "arrayOk": true
                    },
                    "cmin": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "sizeref": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "showscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    },
                    "maxdisplayed": {
                        "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "symbol": {
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "dflt": "circle",
                        "valType": "enumerated",
                        "role": "style",
                        "arrayOk": true
                    },
                    "role": "object",
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    },
                    "line": {
                        "reversescale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the colorscale.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": false
                        },
                        "autocolorscale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether or not the colorscale is picked using the sign of values inside `marker.line.color`.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "role": "object",
                        "width": {
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "arrayOk": true
                        },
                        "colorscale": {
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`.",
                            "valType": "colorscale",
                            "role": "style"
                        },
                        "widthsrc": {
                            "description": "Sets the source reference on plot.ly for  width .",
                            "valType": "string",
                            "role": "info"
                        },
                        "color": {
                            "description": "Sets the marker outline color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "valType": "color",
                            "role": "style",
                            "arrayOk": true
                        },
                        "cmax": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "cauto": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines the whether or not the color domain is computed with respect to the input data.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "cmin": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "colorsrc": {
                            "description": "Sets the source reference on plot.ly for  color .",
                            "valType": "string",
                            "role": "info"
                        }
                    },
                    "sizesrc": {
                        "description": "Sets the source reference on plot.ly for  size .",
                        "valType": "string",
                        "role": "info"
                    },
                    "color": {
                        "description": "Sets the marker color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "cmax": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    }
                },
                "a": {
                    "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
                    "valType": "data_array",
                    "role": "data"
                }
            }
        },
        "scattergl": {
            "description": "The data visualized as scatter point or lines is set in `x` and `y` using the WebGl plotting engine. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to a numerical arrays.",
            "attributes": {
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "xaxis": {
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "x"
                },
                "dy": {
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "dx": {
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "type": "scattergl",
                "error_x": {
                    "thickness": {
                        "description": "Sets the thickness (in px) of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "value": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "array": {
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "valType": "number",
                            "role": "style"
                        }
                    },
                    "arraysrc": {
                        "description": "Sets the source reference on plot.ly for  array .",
                        "valType": "string",
                        "role": "info"
                    },
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "role": "object",
                    "arrayminus": {
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "traceref": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "type": {
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ]
                    },
                    "visible": {
                        "description": "Determines whether or not this set of error bars is visible.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "width": {
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the stoke color of the error bars.",
                        "valType": "color",
                        "role": "style"
                    },
                    "valueminus": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "symmetric": {
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "tracerefminus": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "arrayminussrc": {
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "text": {
                    "dflt": "",
                    "description": "Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.",
                    "valType": "string",
                    "role": "info",
                    "arrayOk": true
                },
                "error_y": {
                    "thickness": {
                        "description": "Sets the thickness (in px) of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "value": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "array": {
                        "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "_deprecated": {
                        "opacity": {
                            "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
                            "valType": "number",
                            "role": "style"
                        }
                    },
                    "arraysrc": {
                        "description": "Sets the source reference on plot.ly for  array .",
                        "valType": "string",
                        "role": "info"
                    },
                    "copy_zstyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "role": "object",
                    "arrayminus": {
                        "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "traceref": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "type": {
                        "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the sqaure of the underlying data. If *array*, the bar lengths are set with data set `array`.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "percent",
                            "constant",
                            "sqrt",
                            "data"
                        ]
                    },
                    "visible": {
                        "description": "Determines whether or not this set of error bars is visible.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "width": {
                        "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                        "min": 0,
                        "valType": "number",
                        "role": "style"
                    },
                    "copy_ystyle": {
                        "valType": "boolean",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the stoke color of the error bars.",
                        "valType": "color",
                        "role": "style"
                    },
                    "valueminus": {
                        "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                        "min": 0,
                        "valType": "number",
                        "role": "info",
                        "dflt": 10
                    },
                    "symmetric": {
                        "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                        "valType": "boolean",
                        "role": "info"
                    },
                    "tracerefminus": {
                        "dflt": 0,
                        "min": 0,
                        "valType": "integer",
                        "role": "info"
                    },
                    "arrayminussrc": {
                        "description": "Sets the source reference on plot.ly for  arrayminus .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "x": {
                    "description": "Sets the x coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "fillcolor": {
                    "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
                    "valType": "color",
                    "role": "style"
                },
                "y": {
                    "description": "Sets the y coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "y0": {
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "valType": "any",
                    "role": "info",
                    "dflt": 0
                },
                "fill": {
                    "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "none",
                        "tozeroy",
                        "tozerox"
                    ],
                    "dflt": "none"
                },
                "yaxis": {
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "y"
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "line": {
                    "color": {
                        "description": "Sets the line color.",
                        "valType": "color",
                        "role": "style"
                    },
                    "role": "object",
                    "width": {
                        "description": "Sets the line width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "dash": {
                        "description": "Sets the style of the lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid"
                    }
                },
                "x0": {
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "valType": "any",
                    "role": "info",
                    "dflt": 0
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "mode": {
                    "flags": [
                        "lines",
                        "markers"
                    ],
                    "extras": [
                        "none"
                    ],
                    "valType": "flaglist",
                    "role": "info",
                    "description": "Determines the drawing mode for this scatter trace."
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                },
                "marker": {
                    "reversescale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the colorscale.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": false
                    },
                    "symbolsrc": {
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "valType": "string",
                        "role": "info"
                    },
                    "size": {
                        "description": "Sets the marker size (in px).",
                        "min": 0,
                        "role": "style",
                        "valType": "number",
                        "dflt": 6,
                        "arrayOk": true
                    },
                    "role": "object",
                    "opacity": {
                        "description": "Sets the marker opacity.",
                        "min": 0,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "arrayOk": true
                    },
                    "sizemin": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "sizemode": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "dflt": "diameter"
                    },
                    "autocolorscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not the colorscale is picked using values inside `marker.color`.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "cmin": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "symbol": {
                        "description": "Sets the marker symbol type.",
                        "values": [
                            "circle",
                            "circle-open",
                            "square",
                            "square-open",
                            "diamond",
                            "diamond-open",
                            "cross",
                            "x"
                        ],
                        "dflt": "circle",
                        "valType": "enumerated",
                        "role": "style",
                        "arrayOk": true
                    },
                    "colorbar": {
                        "tickangle": {
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "valType": "angle",
                            "role": "style",
                            "dflt": "auto"
                        },
                        "thickness": {
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 30
                        },
                        "titlefont": {
                            "description": "Sets this color bar's title font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "ypad": {
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "tickwidth": {
                            "description": "Sets the tick width (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "titleside": {
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "top"
                        },
                        "tickfont": {
                            "description": "Sets the tick font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "bgcolor": {
                            "description": "Sets the color of padded area.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "rgba(0,0,0,0)"
                        },
                        "len": {
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "lenmode": {
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "fraction"
                        },
                        "yanchor": {
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "middle"
                        },
                        "ticktextsrc": {
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "valType": "string",
                            "role": "info"
                        },
                        "ticktext": {
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "xpad": {
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "thicknessmode": {
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "pixels"
                        },
                        "exponentformat": {
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "dflt": "B"
                        },
                        "tickvalssrc": {
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "valType": "string",
                            "role": "info"
                        },
                        "outlinewidth": {
                            "description": "Sets the width (in px) of the axis line.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "tickmode": {
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ]
                        },
                        "showticksuffix": {
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "y": {
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 0.5
                        },
                        "showexponent": {
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "borderwidth": {
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "x": {
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 1.02
                        },
                        "title": {
                            "description": "Sets the title of the color bar.",
                            "valType": "string",
                            "role": "info",
                            "dflt": "Click to enter colorscale title"
                        },
                        "tickvals": {
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "tick0": {
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "showtickprefix": {
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "ticks": {
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "dflt": ""
                        },
                        "tickcolor": {
                            "description": "Sets the tick color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "bordercolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "outlinecolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "dtick": {
                            "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                            "valType": "any",
                            "role": "style",
                            "dflt": 1
                        },
                        "nticks": {
                            "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                            "min": 0,
                            "valType": "integer",
                            "role": "style",
                            "dflt": 0
                        },
                        "showticklabels": {
                            "description": "Determines whether or not the tick labels are drawn.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "tickformat": {
                            "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "role": "object",
                        "xanchor": {
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "left"
                        },
                        "tickprefix": {
                            "description": "Sets a tick label prefix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticksuffix": {
                            "description": "Sets a tick label suffix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticklen": {
                            "description": "Sets the tick length (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 5
                        }
                    },
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    },
                    "cmax": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "cauto": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines the whether or not the color domain is computed automatically.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "sizesrc": {
                        "description": "Sets the source reference on plot.ly for  size .",
                        "valType": "string",
                        "role": "info"
                    },
                    "colorscale": {
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`.",
                        "valType": "colorscale",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the marker color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "line": {
                        "reversescale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the colorscale.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": false
                        },
                        "autocolorscale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether or not the colorscale is picked using the sign of values inside `marker.line.color`.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "role": "object",
                        "width": {
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "arrayOk": true
                        },
                        "colorscale": {
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`.",
                            "valType": "colorscale",
                            "role": "style"
                        },
                        "widthsrc": {
                            "description": "Sets the source reference on plot.ly for  width .",
                            "valType": "string",
                            "role": "info"
                        },
                        "color": {
                            "description": "Sets the marker outline color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "valType": "color",
                            "role": "style",
                            "arrayOk": true
                        },
                        "cmax": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "cauto": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines the whether or not the color domain is computed with respect to the input data.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "cmin": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "colorsrc": {
                            "description": "Sets the source reference on plot.ly for  color .",
                            "valType": "string",
                            "role": "info"
                        }
                    },
                    "opacitysrc": {
                        "description": "Sets the source reference on plot.ly for  opacity .",
                        "valType": "string",
                        "role": "info"
                    },
                    "sizeref": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "showscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    }
                }
            }
        },
        "contour": {
            "description": "The data from which contour lines are computed is set in `z`. Data in `z` must be a {2D array} of numbers. Say that `z` has N rows and M columns, then by default, these N rows correspond to N y coordinates (set in `y` or auto-generated) and the M columns correspond to M x coordinates (set in `x` or auto-generated). By setting `transpose` to *true*, the above behavior is flipped.",
            "attributes": {
                "reversescale": {
                    "description": "Reverses the colorscale.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "autocolorscale": {
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "z": {
                    "description": "Sets the z data.",
                    "valType": "data_array",
                    "role": "data"
                },
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "xaxis": {
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "x"
                },
                "dy": {
                    "description": "Sets the y coordinate step. See `y0` for more info.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "connectgaps": {
                    "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "zmin": {
                    "description": "Sets the lower bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "xtype": {
                    "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "array",
                        "scaled"
                    ]
                },
                "dx": {
                    "description": "Sets the x coordinate step. See `x0` for more info.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "type": "contour",
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "text": {
                    "description": "Sets the text elements associated with each z value.",
                    "valType": "data_array",
                    "role": "data"
                },
                "x": {
                    "description": "Sets the x coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "colorbar": {
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "thickness": {
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 30
                    },
                    "titlefont": {
                        "description": "Sets this color bar's title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "ypad": {
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "titleside": {
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "bgcolor": {
                        "description": "Sets the color of padded area.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgba(0,0,0,0)"
                    },
                    "len": {
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "lenmode": {
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction"
                    },
                    "yanchor": {
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle"
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "xpad": {
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "thicknessmode": {
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels"
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "outlinewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "y": {
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 0.5
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "borderwidth": {
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "x": {
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 1.02
                    },
                    "title": {
                        "description": "Sets the title of the color bar.",
                        "valType": "string",
                        "role": "info",
                        "dflt": "Click to enter colorscale title"
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "dflt": ""
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "bordercolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "outlinecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "role": "object",
                    "xanchor": {
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left"
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    }
                },
                "colorscale": {
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "valType": "colorscale",
                    "role": "style"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "contours": {
                    "end": {
                        "description": "Sets the end contour level value.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "role": "object",
                    "start": {
                        "description": "Sets the starting contour level value.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "showlines": {
                        "description": "Determines whether or not the contour lines are drawn. Has only an effect if `contours.coloring` is set to *fill*.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "coloring": {
                        "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient is coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "fill",
                            "heatmap",
                            "lines",
                            "none"
                        ],
                        "dflt": "fill"
                    },
                    "size": {
                        "description": "Sets the step between each contour level.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    }
                },
                "zsrc": {
                    "description": "Sets the source reference on plot.ly for  z .",
                    "valType": "string",
                    "role": "info"
                },
                "ytype": {
                    "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "array",
                        "scaled"
                    ]
                },
                "showscale": {
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "autocontour": {
                    "description": "Determines whether of not the contour level attributes at picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "ncontours": {
                    "description": "Sets the number of contour levels.",
                    "valType": "integer",
                    "role": "style",
                    "dflt": 0
                },
                "transpose": {
                    "description": "Transposes the z data.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": false
                },
                "y0": {
                    "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
                    "valType": "any",
                    "role": "info",
                    "dflt": 0
                },
                "yaxis": {
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "y"
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "line": {
                    "color": {
                        "description": "Sets the color of the contour level. Has no if `contours.coloring` is set to *lines*.",
                        "valType": "color",
                        "role": "style"
                    },
                    "role": "object",
                    "width": {
                        "description": "Sets the line width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "smoothing": {
                        "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
                        "min": 0,
                        "role": "style",
                        "max": 1.3,
                        "valType": "number",
                        "dflt": 1
                    },
                    "dash": {
                        "description": "Sets the style of the lines. Set to a dash string type or a dash length in px.",
                        "valType": "string",
                        "role": "style",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid"
                    }
                },
                "x0": {
                    "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
                    "valType": "any",
                    "role": "info",
                    "dflt": 0
                },
                "zmax": {
                    "description": "Sets the upper bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "zauto": {
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "y": {
                    "description": "Sets the y coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                }
            }
        },
        "pie": {
            "description": "A data visualized by the sectors of the pie is set in `values`. The sector labels are set in `labels`. The sector colors are set in `marker.colors`",
            "layoutAttributes": {
                "hiddenlabels": {
                    "valType": "data_array",
                    "role": "data"
                },
                "hiddenlabelssrc": {
                    "description": "Sets the source reference on plot.ly for  hiddenlabels .",
                    "valType": "string",
                    "role": "info"
                }
            },
            "attributes": {
                "pull": {
                    "description": "Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 0,
                    "arrayOk": true
                },
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "label",
                        "text",
                        "value",
                        "percent",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "sort": {
                    "description": "Determines whether or not the sectors of reordered from largest to smallest.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "valuessrc": {
                    "description": "Sets the source reference on plot.ly for  values .",
                    "valType": "string",
                    "role": "info"
                },
                "labelssrc": {
                    "description": "Sets the source reference on plot.ly for  labels .",
                    "valType": "string",
                    "role": "info"
                },
                "dlabel": {
                    "description": "Sets the label step. See `label0` for more info.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 1
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "text": {
                    "description": "Sets text elements associated with each sector.",
                    "valType": "data_array",
                    "role": "data"
                },
                "insidetextfont": {
                    "description": "Sets the font used for `textinfo` lying inside the pie.",
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style"
                    },
                    "role": "object",
                    "family": {
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "values": {
                    "description": "Sets the values of the sectors of this pie chart.",
                    "valType": "data_array",
                    "role": "data"
                },
                "direction": {
                    "description": "Specifies the direction at which succeeding sectors follow one another.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "clockwise",
                        "counterclockwise"
                    ],
                    "dflt": "counterclockwise"
                },
                "hole": {
                    "description": "Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 0
                },
                "textinfo": {
                    "flags": [
                        "label",
                        "text",
                        "value",
                        "percent"
                    ],
                    "extras": [
                        "none"
                    ],
                    "valType": "flaglist",
                    "role": "info",
                    "description": "Determines which trace information appear on the graph."
                },
                "domain": {
                    "y": {
                        "description": "Sets the vertical domain of this pie trace (in plot fraction).",
                        "valType": "info_array",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ],
                        "items": [
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            },
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            }
                        ]
                    },
                    "x": {
                        "description": "Sets the horizontal domain of this pie trace (in plot fraction).",
                        "valType": "info_array",
                        "role": "info",
                        "dflt": [
                            0,
                            1
                        ],
                        "items": [
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            },
                            {
                                "min": 0,
                                "max": 1,
                                "valType": "number"
                            }
                        ]
                    },
                    "role": "object"
                },
                "outsidetextfont": {
                    "description": "Sets the font used for `textinfo` lying outside the pie.",
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style"
                    },
                    "role": "object",
                    "family": {
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "textpositionsrc": {
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "valType": "string",
                    "role": "info"
                },
                "label0": {
                    "description": "Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.",
                    "valType": "number",
                    "role": "info",
                    "dflt": 0
                },
                "scalegroup": {
                    "description": "If there are multiple pies that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "textposition": {
                    "description": "Specifies the location of the `textinfo`.",
                    "values": [
                        "inside",
                        "outside",
                        "auto",
                        "none"
                    ],
                    "dflt": "auto",
                    "valType": "enumerated",
                    "role": "info",
                    "arrayOk": true
                },
                "pullsrc": {
                    "description": "Sets the source reference on plot.ly for  pull .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "textfont": {
                    "description": "Sets the font used for `textinfo`.",
                    "color": {
                        "valType": "color",
                        "role": "style"
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style"
                    },
                    "role": "object",
                    "family": {
                        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "marker": {
                    "colors": {
                        "description": "Sets the color of each sector of this pie chart. If not specified, the default trace color set is used to pick the sector colors.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "colorssrc": {
                        "description": "Sets the source reference on plot.ly for  colors .",
                        "valType": "string",
                        "role": "info"
                    },
                    "role": "object",
                    "line": {
                        "color": {
                            "dflt": "#444",
                            "description": "Sets the color of the line enclosing each sector.",
                            "valType": "color",
                            "role": "style",
                            "arrayOk": true
                        },
                        "role": "object",
                        "colorsrc": {
                            "description": "Sets the source reference on plot.ly for  color .",
                            "valType": "string",
                            "role": "info"
                        },
                        "width": {
                            "description": "Sets the width (in px) of the line enclosing each sector.",
                            "min": 0,
                            "role": "style",
                            "valType": "number",
                            "dflt": 0,
                            "arrayOk": true
                        },
                        "widthsrc": {
                            "description": "Sets the source reference on plot.ly for  width .",
                            "valType": "string",
                            "role": "info"
                        }
                    }
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "labels": {
                    "description": "Sets the sector labels.",
                    "valType": "data_array",
                    "role": "data"
                },
                "type": "pie",
                "rotation": {
                    "description": "Instead of the first slice starting at 12 o'clock, rotate to some other angle.",
                    "min": -360,
                    "role": "style",
                    "max": 360,
                    "valType": "number",
                    "dflt": 0
                }
            }
        },
        "area": {
            "attributes": {
                "type": "area",
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "t": {
                    "description": "For polar chart only.Sets the angular coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "rsrc": {
                    "description": "Sets the source reference on plot.ly for  r .",
                    "valType": "string",
                    "role": "info"
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "r": {
                    "description": "For polar chart only.Sets the radial coordinates.",
                    "valType": "data_array",
                    "role": "data"
                },
                "tsrc": {
                    "description": "Sets the source reference on plot.ly for  t .",
                    "valType": "string",
                    "role": "info"
                },
                "marker": {
                    "opacity": {
                        "description": "Sets the marker opacity.",
                        "min": 0,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "arrayOk": true
                    },
                    "symbolsrc": {
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "valType": "string",
                        "role": "info"
                    },
                    "size": {
                        "description": "Sets the marker size (in px).",
                        "min": 0,
                        "role": "style",
                        "valType": "number",
                        "dflt": 6,
                        "arrayOk": true
                    },
                    "opacitysrc": {
                        "description": "Sets the source reference on plot.ly for  opacity .",
                        "valType": "string",
                        "role": "info"
                    },
                    "sizesrc": {
                        "description": "Sets the source reference on plot.ly for  size .",
                        "valType": "string",
                        "role": "info"
                    },
                    "symbol": {
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "dflt": "circle",
                        "valType": "enumerated",
                        "role": "style",
                        "arrayOk": true
                    },
                    "color": {
                        "description": "Sets the marker color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "role": "object",
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    }
                }
            }
        },
        "scattergeo": {
            "description": "The data visualized as scatter point or lines on a geographic map is provided either by longitude/latitude pairs in `lon` and `lat` respectively or by geographic location IDs or names in `locations`.",
            "hrName": "scatter_geo",
            "attributes": {
                "latsrc": {
                    "description": "Sets the source reference on plot.ly for  lat .",
                    "valType": "string",
                    "role": "info"
                },
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "lon",
                        "lat",
                        "location",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "type": "scattergeo",
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "text": {
                    "dflt": "",
                    "description": "Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates.",
                    "valType": "string",
                    "role": "info",
                    "arrayOk": true
                },
                "locationssrc": {
                    "description": "Sets the source reference on plot.ly for  locations .",
                    "valType": "string",
                    "role": "info"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "lat": {
                    "description": "Sets the latitude coordinates (in degrees North).",
                    "valType": "data_array",
                    "role": "data"
                },
                "locations": {
                    "description": "Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.",
                    "valType": "data_array",
                    "role": "data"
                },
                "lon": {
                    "description": "Sets the longitude coordinates (in degrees East).",
                    "valType": "data_array",
                    "role": "data"
                },
                "lonsrc": {
                    "description": "Sets the source reference on plot.ly for  lon .",
                    "valType": "string",
                    "role": "info"
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "textsrc": {
                    "description": "Sets the source reference on plot.ly for  text .",
                    "valType": "string",
                    "role": "info"
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "textpositionsrc": {
                    "description": "Sets the source reference on plot.ly for  textposition .",
                    "valType": "string",
                    "role": "info"
                },
                "textposition": {
                    "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
                    "values": [
                        "top left",
                        "top center",
                        "top right",
                        "middle left",
                        "middle center",
                        "middle right",
                        "bottom left",
                        "bottom center",
                        "bottom right"
                    ],
                    "dflt": "middle center",
                    "valType": "enumerated",
                    "role": "style",
                    "arrayOk": true
                },
                "geo": {
                    "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "geo"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "textfont": {
                    "description": "Sets the text font.",
                    "family": {
                        "valType": "string",
                        "role": "style",
                        "noBlank": true,
                        "strict": true,
                        "arrayOk": true
                    },
                    "size": {
                        "min": 1,
                        "valType": "number",
                        "role": "style",
                        "arrayOk": true
                    },
                    "sizesrc": {
                        "description": "Sets the source reference on plot.ly for  size .",
                        "valType": "string",
                        "role": "info"
                    },
                    "familysrc": {
                        "description": "Sets the source reference on plot.ly for  family .",
                        "valType": "string",
                        "role": "info"
                    },
                    "color": {
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "role": "object",
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    }
                },
                "line": {
                    "color": {
                        "description": "Sets the line color.",
                        "valType": "color",
                        "role": "style"
                    },
                    "role": "object",
                    "width": {
                        "description": "Sets the line width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 2
                    },
                    "dash": {
                        "description": "Sets the style of the lines. Set to a dash string type or a dash length in px.",
                        "valType": "string",
                        "role": "style",
                        "values": [
                            "solid",
                            "dot",
                            "dash",
                            "longdash",
                            "dashdot",
                            "longdashdot"
                        ],
                        "dflt": "solid"
                    }
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "mode": {
                    "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.",
                    "role": "info",
                    "flags": [
                        "lines",
                        "markers",
                        "text"
                    ],
                    "extras": [
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "markers"
                },
                "marker": {
                    "reversescale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the colorscale.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": false
                    },
                    "symbolsrc": {
                        "description": "Sets the source reference on plot.ly for  symbol .",
                        "valType": "string",
                        "role": "info"
                    },
                    "size": {
                        "description": "Sets the marker size (in px).",
                        "min": 0,
                        "role": "style",
                        "valType": "number",
                        "dflt": 6,
                        "arrayOk": true
                    },
                    "role": "object",
                    "opacity": {
                        "description": "Sets the marker opacity.",
                        "min": 0,
                        "max": 1,
                        "valType": "number",
                        "role": "style",
                        "arrayOk": true
                    },
                    "sizemin": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "sizemode": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "diameter",
                            "area"
                        ],
                        "dflt": "diameter"
                    },
                    "autocolorscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not the colorscale is picked using values inside `marker.color`.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "cmin": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "symbol": {
                        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                        "values": [
                            0,
                            "circle",
                            100,
                            "circle-open",
                            200,
                            "circle-dot",
                            300,
                            "circle-open-dot",
                            1,
                            "square",
                            101,
                            "square-open",
                            201,
                            "square-dot",
                            301,
                            "square-open-dot",
                            2,
                            "diamond",
                            102,
                            "diamond-open",
                            202,
                            "diamond-dot",
                            302,
                            "diamond-open-dot",
                            3,
                            "cross",
                            103,
                            "cross-open",
                            203,
                            "cross-dot",
                            303,
                            "cross-open-dot",
                            4,
                            "x",
                            104,
                            "x-open",
                            204,
                            "x-dot",
                            304,
                            "x-open-dot",
                            5,
                            "triangle-up",
                            105,
                            "triangle-up-open",
                            205,
                            "triangle-up-dot",
                            305,
                            "triangle-up-open-dot",
                            6,
                            "triangle-down",
                            106,
                            "triangle-down-open",
                            206,
                            "triangle-down-dot",
                            306,
                            "triangle-down-open-dot",
                            7,
                            "triangle-left",
                            107,
                            "triangle-left-open",
                            207,
                            "triangle-left-dot",
                            307,
                            "triangle-left-open-dot",
                            8,
                            "triangle-right",
                            108,
                            "triangle-right-open",
                            208,
                            "triangle-right-dot",
                            308,
                            "triangle-right-open-dot",
                            9,
                            "triangle-ne",
                            109,
                            "triangle-ne-open",
                            209,
                            "triangle-ne-dot",
                            309,
                            "triangle-ne-open-dot",
                            10,
                            "triangle-se",
                            110,
                            "triangle-se-open",
                            210,
                            "triangle-se-dot",
                            310,
                            "triangle-se-open-dot",
                            11,
                            "triangle-sw",
                            111,
                            "triangle-sw-open",
                            211,
                            "triangle-sw-dot",
                            311,
                            "triangle-sw-open-dot",
                            12,
                            "triangle-nw",
                            112,
                            "triangle-nw-open",
                            212,
                            "triangle-nw-dot",
                            312,
                            "triangle-nw-open-dot",
                            13,
                            "pentagon",
                            113,
                            "pentagon-open",
                            213,
                            "pentagon-dot",
                            313,
                            "pentagon-open-dot",
                            14,
                            "hexagon",
                            114,
                            "hexagon-open",
                            214,
                            "hexagon-dot",
                            314,
                            "hexagon-open-dot",
                            15,
                            "hexagon2",
                            115,
                            "hexagon2-open",
                            215,
                            "hexagon2-dot",
                            315,
                            "hexagon2-open-dot",
                            16,
                            "octagon",
                            116,
                            "octagon-open",
                            216,
                            "octagon-dot",
                            316,
                            "octagon-open-dot",
                            17,
                            "star",
                            117,
                            "star-open",
                            217,
                            "star-dot",
                            317,
                            "star-open-dot",
                            18,
                            "hexagram",
                            118,
                            "hexagram-open",
                            218,
                            "hexagram-dot",
                            318,
                            "hexagram-open-dot",
                            19,
                            "star-triangle-up",
                            119,
                            "star-triangle-up-open",
                            219,
                            "star-triangle-up-dot",
                            319,
                            "star-triangle-up-open-dot",
                            20,
                            "star-triangle-down",
                            120,
                            "star-triangle-down-open",
                            220,
                            "star-triangle-down-dot",
                            320,
                            "star-triangle-down-open-dot",
                            21,
                            "star-square",
                            121,
                            "star-square-open",
                            221,
                            "star-square-dot",
                            321,
                            "star-square-open-dot",
                            22,
                            "star-diamond",
                            122,
                            "star-diamond-open",
                            222,
                            "star-diamond-dot",
                            322,
                            "star-diamond-open-dot",
                            23,
                            "diamond-tall",
                            123,
                            "diamond-tall-open",
                            223,
                            "diamond-tall-dot",
                            323,
                            "diamond-tall-open-dot",
                            24,
                            "diamond-wide",
                            124,
                            "diamond-wide-open",
                            224,
                            "diamond-wide-dot",
                            324,
                            "diamond-wide-open-dot",
                            25,
                            "hourglass",
                            125,
                            "hourglass-open",
                            26,
                            "bowtie",
                            126,
                            "bowtie-open",
                            27,
                            "circle-cross",
                            127,
                            "circle-cross-open",
                            28,
                            "circle-x",
                            128,
                            "circle-x-open",
                            29,
                            "square-cross",
                            129,
                            "square-cross-open",
                            30,
                            "square-x",
                            130,
                            "square-x-open",
                            31,
                            "diamond-cross",
                            131,
                            "diamond-cross-open",
                            32,
                            "diamond-x",
                            132,
                            "diamond-x-open",
                            33,
                            "cross-thin",
                            133,
                            "cross-thin-open",
                            34,
                            "x-thin",
                            134,
                            "x-thin-open",
                            35,
                            "asterisk",
                            135,
                            "asterisk-open",
                            36,
                            "hash",
                            136,
                            "hash-open",
                            236,
                            "hash-dot",
                            336,
                            "hash-open-dot",
                            37,
                            "y-up",
                            137,
                            "y-up-open",
                            38,
                            "y-down",
                            138,
                            "y-down-open",
                            39,
                            "y-left",
                            139,
                            "y-left-open",
                            40,
                            "y-right",
                            140,
                            "y-right-open",
                            41,
                            "line-ew",
                            141,
                            "line-ew-open",
                            42,
                            "line-ns",
                            142,
                            "line-ns-open",
                            43,
                            "line-ne",
                            143,
                            "line-ne-open",
                            44,
                            "line-nw",
                            144,
                            "line-nw-open"
                        ],
                        "dflt": "circle",
                        "valType": "enumerated",
                        "role": "style",
                        "arrayOk": true
                    },
                    "colorbar": {
                        "tickangle": {
                            "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                            "valType": "angle",
                            "role": "style",
                            "dflt": "auto"
                        },
                        "thickness": {
                            "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 30
                        },
                        "titlefont": {
                            "description": "Sets this color bar's title font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "ypad": {
                            "description": "Sets the amount of padding (in px) along the y direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "tickwidth": {
                            "description": "Sets the tick width (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "titleside": {
                            "description": "Determines the location of the colorbar title with respect to the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "right",
                                "top",
                                "bottom"
                            ],
                            "dflt": "top"
                        },
                        "tickfont": {
                            "description": "Sets the tick font.",
                            "color": {
                                "valType": "color",
                                "role": "style"
                            },
                            "size": {
                                "min": 1,
                                "valType": "number",
                                "role": "style"
                            },
                            "role": "object",
                            "family": {
                                "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                                "valType": "string",
                                "role": "style",
                                "noBlank": true,
                                "strict": true
                            }
                        },
                        "bgcolor": {
                            "description": "Sets the color of padded area.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "rgba(0,0,0,0)"
                        },
                        "len": {
                            "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "lenmode": {
                            "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "fraction"
                        },
                        "yanchor": {
                            "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "top",
                                "middle",
                                "bottom"
                            ],
                            "dflt": "middle"
                        },
                        "ticktextsrc": {
                            "description": "Sets the source reference on plot.ly for  ticktext .",
                            "valType": "string",
                            "role": "info"
                        },
                        "ticktext": {
                            "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "xpad": {
                            "description": "Sets the amount of padding (in px) along the x direction.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 10
                        },
                        "thicknessmode": {
                            "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "fraction",
                                "pixels"
                            ],
                            "dflt": "pixels"
                        },
                        "exponentformat": {
                            "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "none",
                                "e",
                                "E",
                                "power",
                                "SI",
                                "B"
                            ],
                            "dflt": "B"
                        },
                        "tickvalssrc": {
                            "description": "Sets the source reference on plot.ly for  tickvals .",
                            "valType": "string",
                            "role": "info"
                        },
                        "outlinewidth": {
                            "description": "Sets the width (in px) of the axis line.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 1
                        },
                        "tickmode": {
                            "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                            "valType": "enumerated",
                            "role": "info",
                            "values": [
                                "auto",
                                "linear",
                                "array"
                            ]
                        },
                        "showticksuffix": {
                            "description": "Same as `showtickprefix` but for tick suffixes.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "y": {
                            "description": "Sets the y position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 0.5
                        },
                        "showexponent": {
                            "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "borderwidth": {
                            "description": "Sets the width (in px) or the border enclosing this color bar.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "x": {
                            "description": "Sets the x position of the color bar (in plot fraction).",
                            "min": -2,
                            "role": "style",
                            "max": 3,
                            "valType": "number",
                            "dflt": 1.02
                        },
                        "title": {
                            "description": "Sets the title of the color bar.",
                            "valType": "string",
                            "role": "info",
                            "dflt": "Click to enter colorscale title"
                        },
                        "tickvals": {
                            "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                            "valType": "data_array",
                            "role": "data"
                        },
                        "tick0": {
                            "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                            "valType": "number",
                            "role": "style",
                            "dflt": 0
                        },
                        "showtickprefix": {
                            "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "all",
                                "first",
                                "last",
                                "none"
                            ],
                            "dflt": "all"
                        },
                        "ticks": {
                            "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "outside",
                                "inside",
                                ""
                            ],
                            "dflt": ""
                        },
                        "tickcolor": {
                            "description": "Sets the tick color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "bordercolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "outlinecolor": {
                            "description": "Sets the axis line color.",
                            "valType": "color",
                            "role": "style",
                            "dflt": "#444"
                        },
                        "dtick": {
                            "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                            "valType": "any",
                            "role": "style",
                            "dflt": 1
                        },
                        "nticks": {
                            "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                            "min": 0,
                            "valType": "integer",
                            "role": "style",
                            "dflt": 0
                        },
                        "showticklabels": {
                            "description": "Determines whether or not the tick labels are drawn.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "tickformat": {
                            "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "role": "object",
                        "xanchor": {
                            "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                            "valType": "enumerated",
                            "role": "style",
                            "values": [
                                "left",
                                "center",
                                "right"
                            ],
                            "dflt": "left"
                        },
                        "tickprefix": {
                            "description": "Sets a tick label prefix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticksuffix": {
                            "description": "Sets a tick label suffix.",
                            "valType": "string",
                            "role": "style",
                            "dflt": ""
                        },
                        "ticklen": {
                            "description": "Sets the tick length (in px).",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "dflt": 5
                        }
                    },
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    },
                    "cmax": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.",
                        "valType": "number",
                        "role": "info",
                        "dflt": null
                    },
                    "cauto": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines the whether or not the color domain is computed automatically.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "sizesrc": {
                        "description": "Sets the source reference on plot.ly for  size .",
                        "valType": "string",
                        "role": "info"
                    },
                    "colorscale": {
                        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`.",
                        "valType": "colorscale",
                        "role": "style"
                    },
                    "color": {
                        "description": "Sets the marker color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                        "valType": "color",
                        "role": "style",
                        "arrayOk": true
                    },
                    "line": {
                        "reversescale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the colorscale.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": false
                        },
                        "autocolorscale": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether or not the colorscale is picked using the sign of values inside `marker.line.color`.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "role": "object",
                        "width": {
                            "description": "Sets the width (in px) of the lines bounding the marker points.",
                            "min": 0,
                            "valType": "number",
                            "role": "style",
                            "arrayOk": true
                        },
                        "colorscale": {
                            "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`.",
                            "valType": "colorscale",
                            "role": "style"
                        },
                        "widthsrc": {
                            "description": "Sets the source reference on plot.ly for  width .",
                            "valType": "string",
                            "role": "info"
                        },
                        "color": {
                            "description": "Sets the marker outline color. It accepts either a specific color or an array of values that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.",
                            "valType": "color",
                            "role": "style",
                            "arrayOk": true
                        },
                        "cmax": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "cauto": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines the whether or not the color domain is computed with respect to the input data.",
                            "valType": "boolean",
                            "role": "style",
                            "dflt": true
                        },
                        "cmin": {
                            "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.",
                            "valType": "number",
                            "role": "info",
                            "dflt": null
                        },
                        "colorsrc": {
                            "description": "Sets the source reference on plot.ly for  color .",
                            "valType": "string",
                            "role": "info"
                        }
                    },
                    "opacitysrc": {
                        "description": "Sets the source reference on plot.ly for  opacity .",
                        "valType": "string",
                        "role": "info"
                    },
                    "sizeref": {
                        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "showscale": {
                        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.",
                        "valType": "boolean",
                        "role": "info",
                        "dflt": false
                    }
                },
                "locationmode": {
                    "description": "Determines the set of locations used to match entries in `locations` to regions on the map.",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        "ISO-3",
                        "USA-states",
                        "country names"
                    ],
                    "dflt": "ISO-3"
                }
            }
        },
        "histogram2d": {
            "description": "The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a heatmap.",
            "hrName": "histogram_2d",
            "attributes": {
                "reversescale": {
                    "description": "Reverses the colorscale.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "autocolorscale": {
                    "description": "Determines whether or not the colorscale is picked using the sign of the input z values.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": false
                },
                "hoverinfo": {
                    "description": "Determines which trace information appear on hover.",
                    "role": "info",
                    "flags": [
                        "x",
                        "y",
                        "z",
                        "text",
                        "name"
                    ],
                    "extras": [
                        "all",
                        "none"
                    ],
                    "valType": "flaglist",
                    "dflt": "all"
                },
                "opacity": {
                    "description": "Sets the opacity of the trace.",
                    "min": 0,
                    "role": "style",
                    "max": 1,
                    "valType": "number",
                    "dflt": 1
                },
                "xaxis": {
                    "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "x"
                },
                "z": {
                    "description": "Sets the aggregation data.",
                    "valType": "data_array",
                    "role": "data"
                },
                "zmin": {
                    "description": "Sets the lower bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "ybins": {
                    "end": {
                        "description": "Sets the end value for the y axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "role": "object",
                    "start": {
                        "description": "Sets the starting value for the y axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "size": {
                        "description": "Sets the step in-between value each y axis bin.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    }
                },
                "colorbar": {
                    "tickangle": {
                        "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                        "valType": "angle",
                        "role": "style",
                        "dflt": "auto"
                    },
                    "thickness": {
                        "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 30
                    },
                    "titlefont": {
                        "description": "Sets this color bar's title font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "ypad": {
                        "description": "Sets the amount of padding (in px) along the y direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "tickwidth": {
                        "description": "Sets the tick width (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "titleside": {
                        "description": "Determines the location of the colorbar title with respect to the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "right",
                            "top",
                            "bottom"
                        ],
                        "dflt": "top"
                    },
                    "tickfont": {
                        "description": "Sets the tick font.",
                        "color": {
                            "valType": "color",
                            "role": "style"
                        },
                        "size": {
                            "min": 1,
                            "valType": "number",
                            "role": "style"
                        },
                        "role": "object",
                        "family": {
                            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
                            "valType": "string",
                            "role": "style",
                            "noBlank": true,
                            "strict": true
                        }
                    },
                    "bgcolor": {
                        "description": "Sets the color of padded area.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "rgba(0,0,0,0)"
                    },
                    "len": {
                        "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "lenmode": {
                        "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "fraction"
                    },
                    "yanchor": {
                        "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "top",
                            "middle",
                            "bottom"
                        ],
                        "dflt": "middle"
                    },
                    "ticktextsrc": {
                        "description": "Sets the source reference on plot.ly for  ticktext .",
                        "valType": "string",
                        "role": "info"
                    },
                    "ticktext": {
                        "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "xpad": {
                        "description": "Sets the amount of padding (in px) along the x direction.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 10
                    },
                    "thicknessmode": {
                        "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "fraction",
                            "pixels"
                        ],
                        "dflt": "pixels"
                    },
                    "exponentformat": {
                        "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "none",
                            "e",
                            "E",
                            "power",
                            "SI",
                            "B"
                        ],
                        "dflt": "B"
                    },
                    "tickvalssrc": {
                        "description": "Sets the source reference on plot.ly for  tickvals .",
                        "valType": "string",
                        "role": "info"
                    },
                    "outlinewidth": {
                        "description": "Sets the width (in px) of the axis line.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 1
                    },
                    "tickmode": {
                        "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                        "valType": "enumerated",
                        "role": "info",
                        "values": [
                            "auto",
                            "linear",
                            "array"
                        ]
                    },
                    "showticksuffix": {
                        "description": "Same as `showtickprefix` but for tick suffixes.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "y": {
                        "description": "Sets the y position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 0.5
                    },
                    "showexponent": {
                        "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "borderwidth": {
                        "description": "Sets the width (in px) or the border enclosing this color bar.",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "x": {
                        "description": "Sets the x position of the color bar (in plot fraction).",
                        "min": -2,
                        "role": "style",
                        "max": 3,
                        "valType": "number",
                        "dflt": 1.02
                    },
                    "title": {
                        "description": "Sets the title of the color bar.",
                        "valType": "string",
                        "role": "info",
                        "dflt": "Click to enter colorscale title"
                    },
                    "tickvals": {
                        "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "tick0": {
                        "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.",
                        "valType": "number",
                        "role": "style",
                        "dflt": 0
                    },
                    "showtickprefix": {
                        "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "all",
                            "first",
                            "last",
                            "none"
                        ],
                        "dflt": "all"
                    },
                    "ticks": {
                        "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "outside",
                            "inside",
                            ""
                        ],
                        "dflt": ""
                    },
                    "tickcolor": {
                        "description": "Sets the tick color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "bordercolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "outlinecolor": {
                        "description": "Sets the axis line color.",
                        "valType": "color",
                        "role": "style",
                        "dflt": "#444"
                    },
                    "dtick": {
                        "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    },
                    "nticks": {
                        "description": "Sets the number of ticks. Has an effect only if `tickmode` is set to *auto*.",
                        "min": 0,
                        "valType": "integer",
                        "role": "style",
                        "dflt": 0
                    },
                    "showticklabels": {
                        "description": "Determines whether or not the tick labels are drawn.",
                        "valType": "boolean",
                        "role": "style",
                        "dflt": true
                    },
                    "tickformat": {
                        "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "role": "object",
                    "xanchor": {
                        "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
                        "valType": "enumerated",
                        "role": "style",
                        "values": [
                            "left",
                            "center",
                            "right"
                        ],
                        "dflt": "left"
                    },
                    "tickprefix": {
                        "description": "Sets a tick label prefix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticksuffix": {
                        "description": "Sets a tick label suffix.",
                        "valType": "string",
                        "role": "style",
                        "dflt": ""
                    },
                    "ticklen": {
                        "description": "Sets the tick length (in px).",
                        "min": 0,
                        "valType": "number",
                        "role": "style",
                        "dflt": 5
                    }
                },
                "showlegend": {
                    "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "visible": {
                    "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
                    "valType": "enumerated",
                    "role": "info",
                    "values": [
                        true,
                        false,
                        "legendonly"
                    ],
                    "dflt": true
                },
                "histfunc": {
                    "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "count",
                        "sum",
                        "avg",
                        "min",
                        "max"
                    ],
                    "dflt": "count"
                },
                "colorscale": {
                    "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax",
                    "valType": "colorscale",
                    "role": "style"
                },
                "name": {
                    "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
                    "valType": "string",
                    "role": "info"
                },
                "autobiny": {
                    "description": "Determines whether or not the y axis bin attributes are picked by an algorithm.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "zsrc": {
                    "description": "Sets the source reference on plot.ly for  z .",
                    "valType": "string",
                    "role": "info"
                },
                "showscale": {
                    "description": "Determines whether or not a colorbar is displayed for this trace.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "type": "histogram2d",
                "nbinsy": {
                    "description": "Sets the number of y axis bins.",
                    "min": 0,
                    "valType": "integer",
                    "role": "style",
                    "dflt": 0
                },
                "nbinsx": {
                    "description": "Sets the number of x axis bins.",
                    "min": 0,
                    "valType": "integer",
                    "role": "style",
                    "dflt": 0
                },
                "xbins": {
                    "end": {
                        "description": "Sets the end value for the x axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "role": "object",
                    "start": {
                        "description": "Sets the starting value for the x axis bins.",
                        "valType": "number",
                        "role": "style",
                        "dflt": null
                    },
                    "size": {
                        "description": "Sets the step in-between value each x axis bin.",
                        "valType": "any",
                        "role": "style",
                        "dflt": 1
                    }
                },
                "uid": {
                    "dflt": "",
                    "valType": "string",
                    "role": "info"
                },
                "y": {
                    "description": "Sets the sample data to be binned on the y axis.",
                    "valType": "data_array",
                    "role": "data"
                },
                "xsrc": {
                    "description": "Sets the source reference on plot.ly for  x .",
                    "valType": "string",
                    "role": "info"
                },
                "yaxis": {
                    "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.xaxis2`, and so on.",
                    "valType": "subplotid",
                    "role": "info",
                    "dflt": "y"
                },
                "ysrc": {
                    "description": "Sets the source reference on plot.ly for  y .",
                    "valType": "string",
                    "role": "info"
                },
                "stream": {
                    "maxpoints": {
                        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                        "min": 0,
                        "valType": "number",
                        "role": "info"
                    },
                    "role": "object",
                    "token": {
                        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.",
                        "valType": "string",
                        "role": "info",
                        "noBlank": true,
                        "strict": true
                    }
                },
                "autobinx": {
                    "description": "Determines whether or not the x axis bin attributes are picked by an algorithm.",
                    "valType": "boolean",
                    "role": "style",
                    "dflt": true
                },
                "x": {
                    "description": "Sets the sample data to be binned on the x axis.",
                    "valType": "data_array",
                    "role": "data"
                },
                "zmax": {
                    "description": "Sets the upper bound of color domain.",
                    "valType": "number",
                    "role": "info",
                    "dflt": null
                },
                "zauto": {
                    "description": "Determines the whether or not the color domain is computed with respect to the input data.",
                    "valType": "boolean",
                    "role": "info",
                    "dflt": true
                },
                "legendgroup": {
                    "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
                    "valType": "string",
                    "role": "info",
                    "dflt": ""
                },
                "histnorm": {
                    "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent*, the span of each bar corresponds to the percentage of occurrences with respect to the total number of sample points (here, the sum of all bin area equals 100%). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin area equals the total number of sample points). If *probability density*, the span of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin area equals 1).",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "",
                        "percent",
                        "probability",
                        "density",
                        "probability density"
                    ],
                    "dflt": ""
                },
                "zsmooth": {
                    "description": "Picks a smoothing algorithm use to smooth `z` data.",
                    "valType": "enumerated",
                    "role": "style",
                    "values": [
                        "fast",
                        "best",
                        false
                    ],
                    "dflt": false
                },
                "marker": {
                    "color": {
                        "description": "Sets the aggregation data.",
                        "valType": "data_array",
                        "role": "data"
                    },
                    "role": "object",
                    "colorsrc": {
                        "description": "Sets the source reference on plot.ly for  color .",
                        "valType": "string",
                        "role": "info"
                    }
                }
            }
        }
    }
}